qqnorm(all.aml[i.ring1,],main=rownames(all.aml)[i.ring1]); qqline(all.aml[i.ring1,])
# Check the annotation dataset
head(all.aml.anno)
# Let's find some differences
# We already have i.mapk3 and i.ring1
i.f <- grep('M', all.aml.anno$Gender)
i.bm <- grep('BM', all.aml.anno$BM.PB)
# Case 1:
boxplot(list(Female=all.aml[i.mapk3,i.f],Male=all.aml[i.mapk3,-i.f]),main=rownames(all.aml)[i.mapk3])
#
# Case 2:
boxplot(list(Female=all.aml[i.ring1,i.f],Male=all.aml[i.ring1,-i.f]),main=rownames(all.aml)[i.ring1])
#
# Case 3:
boxplot(list(BoneM=all.aml[i.mapk3,i.bm],P_Blood=all.aml[i.mapk3,-i.bm]),main=rownames(all.aml)[i.mapk3])
#
# Case 4:
boxplot(list(BoneM=all.aml[i.ring1,i.bm],P_Blood=all.aml[i.ring1,-i.bm]),main=rownames(all.aml)[i.ring1])
mean(all.aml[i.mapk3,i.f])
mean(all.aml[i.mapk3,-i.f])
var.diff <- ifelse(var.test(all.aml[i.mapk3,i.f],all.aml[i.mapk3,-i.f])$p.value < 0.05,TRUE,FALSE)
t.test(all.aml[i.mapk3,i.f],all.aml[i.mapk3,-i.f],alternative = "two.sided", var.equal = var.diff)
all.aml = read.delim('http://bioinfo.ipmb.uni-heidelberg.de/crg/datascience3fs/practicals/data/all.aml.cleaned.csv',header=TRUE)
all.aml.anno = read.delim("http://bioinfo.ipmb.uni-heidelberg.de/crg/datascience3fs/practicals/data/all.aml.anno.cleaned.csv", header=TRUE)
#
# We convert all.aml into a data matrix rather than a data.frame
all.aml = data.matrix(all.aml)
#
i.mapk3 <- grep("MAPK3",row.names(all.aml))
i.ring1 <- grep("RING1",row.names(all.aml))
#
# Case 2:
boxplot(list(Female=all.aml[i.ring1,i.f],Male=all.aml[i.ring1,-i.f]),main=rownames(all.aml)[i.ring1])
#
# Case 3:
boxplot(list(BoneM=all.aml[i.mapk3,i.bm],P_Blood=all.aml[i.mapk3,-i.bm]),main=rownames(all.aml)[i.mapk3])
#
# Case 4:
boxplot(list(BoneM=all.aml[i.ring1,i.bm],P_Blood=all.aml[i.ring1,-i.bm]),main=rownames(all.aml)[i.ring1])
##H0: The average expression levels of Ring1 in female patients is equal to the average expression levels male patients.
##H1: The average expression levels of Ring1 in female patients is higher or lower to the average expression levels male patients.
t.test(all.aml[i.ring1,i.f],all.aml[i.ring1,-i.f],alternative = "two.sided", var.equal = var.diff)
##H0: The average expression levels of MAPK3 of samples taken from BoneM is equal to the average expression levels of samples taken from P_Blood.
##H1: The average expression levels of MAPK3 of samples taken from BoneM is higher or lower to the average expression levels of samples taken from P_Blood.
t.test(all.aml[i.mapk3,i.bm],all.aml[i.mapk3,-i.bm],alternative = "two.sided", var.equal = var.diff)
##H0: The average expression levels of Ring1 of samples taken from BoneM is equal to the average expression levels of samples taken from P_Blood.
##H1: The average expression levels of Ring1 of samples taken from BoneM is higher or lower to the average expression levels of samples taken from P_Blood.
t.test(all.aml[i.ring1,i.bm],all.aml[i.ring1,-i.bm],alternative = "two.sided", var.equal = var.diff)
p.sh.test = apply(all.aml,1, function(x){shapiro.test(x)$p.value})
norm.all.aml = all.aml[which(p.sh.test > 0.05),]
sapply(norm.all.aml,function(x){t.test(all.aml[x,i.all],all.aml[x,-i.all])$p.value})
p.sh.test = apply(all.aml,1, function(x){shapiro.test(x)$p.value})
norm.all.aml = all.aml[which(p.sh.test > 0.05),]
sapply(norm.all.aml,function(x){t.test(all.aml[x,i.all],all.aml[x,-i.all])$p.value})
library(knitr)
library(rmdformats)
## Global options
options(max.print="120")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=120)
opts_knit$set(root.dir  = "~/")
all.aml = read.delim('http://bioinfo.ipmb.uni-heidelberg.de/crg/datascience3fs/practicals/data/all.aml.cleaned.csv',header=TRUE)
all.aml.anno = read.delim("http://bioinfo.ipmb.uni-heidelberg.de/crg/datascience3fs/practicals/data/all.aml.anno.cleaned.csv", header=TRUE)
#
# we convert all.aml into a data matrix rather than a data.frame
all.aml = data.matrix(all.aml)
i.all = grep('ALL', all.aml.anno$ALL.AML)
expression = all.aml['FOSB',]
hist(expression,breaks = 30);qqnorm(expression);qqline(expression)
exp.all = all.aml['FOSB',i.all]
exp.aml = all.aml['FOSB',-i.all]
wilcox.test(exp.all,exp.aml)
exp.all = all.aml['FOSB',i.all]
exp.aml = all.aml['FOSB',-i.all]
t.test(exp.all,exp.aml)
set.seed(123)
alpha = 0.05
p = sapply(1:10000,function(i) {
x = rnorm(10);y = rnorm(10)
t.test(x,y)$p.value
})
hist(p,breaks=20);abline(v=alpha,col='red',lwd=3)
sum(p<alpha)/length(p)
alphas = c(0.01,0.02,0.03,0.04,0.05,0.07,0.1,0.2)
fpr = sapply(alphas,function(alpha) {
sum(p<alpha)/length(p)
})
plot(alphas,fpr,xlab='alpha',pch=19,col='red');abline(0,1,lwd=2,lty=2,col='lightgrey')
p = sapply(1:10000,function(i) {
x = rt(10,df=1);y = rt(10,df=1)
t.test(x,y)$p.value
})
hist(p,breaks=20);abline(v=alpha,col='red',lwd=3)
sum(p<alpha)/length(p)
alphas = c(0.01,0.02,0.03,0.04,0.05,0.07,0.1,0.2)
fpr = sapply(alphas,function(alpha) {
sum(p<alpha)/length(p)
})
plot(alphas,fpr,xlab='alpha',pch=19,col='red');abline(0,1,lwd=2,lty=2,col='lightgrey')
expression = all.aml[8,]
hist(expression,breaks = 30);qqnorm(expression);qqline(expression)
exp.all = all.aml[8,i.all]
exp.aml = all.aml[8,-i.all]
wilcox.test(exp.all,exp.aml)
t.test(exp.all,exp.aml)
i.all = grep('ALL', all.aml.anno$ALL.AML)
p_t.test <- as.vector(apply(all.aml,1,function(x){t.test(all.aml[x,i.all],all.aml[x,-i.all])$p.value}))
p_t.test <- apply(all.aml,1,function(x){t.test(all.aml[x,i.all],all.aml[x,-i.all])$p.value})
i.all = grep('ALL', all.aml.anno$ALL.AML)
p_t.test <- apply(all.aml,1,function(x){t.test(all.aml[x,i.all],all.aml[x,-i.all])$p.value})
i.all = grep('ALL', all.aml.anno$ALL.AML)
p_t.test <- apply(all.aml,1,function(x){t.test(x[i.all],x[-i.all])$p.value})
p_t.test <- as.vector(apply(all.aml,1,function(x){t.test(all.aml[x,i.all],all.aml[x,-i.all])$p.value}))
i.all = grep('ALL', all.aml.anno$ALL.AML)
p_t.test <- apply(all.aml,1,function(x){t.test(x[i.all],x[-i.all])$p.value})
p_wilcox <- apply(all.aml,1,function(x){wilcox.test(x[i.all],x[-i.all])$p.value})
i.all = grep('ALL', all.aml.anno$ALL.AML)
p_t.test <- apply(all.aml,1,function(x){t.test(x[i.all],x[-i.all])$p.value})
p_wilcox <- apply(all.aml,1,function(x){wilcox.test(x[i.all],x[-i.all])$p.value})
p_t.test; p_wilcox
class(p_t.test)
class(p_wilcox)
plot(-log10(p_t.test), -log10(p_wilcox))
dat = dat[- which(is.na[1:nrows,]),]
library(knitr)
library(rmdformats)
## Global options
options(max.print="120")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=120)
opts_knit$set(root.dir = "~/")
tmp = read.table('https://www.dropbox.com/s/zviurze7c85quyw/diabetes_full.csv?dl=1',header=TRUE,sep="\t")
dat = tmp[,c(2,3,4,6,8,10,11,13,14,17,18)]
head(dat)
dat = dat[- which(is.na[1:nrows,]),]
dat = dat[- which(is.na[1:nrow,]),]
rmv.row = apply(dat,1,function(x){sum(is.na(x))})
dat = dat[- which(rmv.row > 0),]
dat
##cor.mat = cor(dat[,1:ncol(dat)], method="pearson")
##round(cor.mat,2) # all pairwise correlations
par(mar=c(3,3,0.5,0.5), mgp=c(1.5,0.5,0), las=2)
pairs(dat[,4:ncol(dat)], pch=20, cex=0.5, col="grey")
##cor.mat = cor(dat[,1:ncol(dat)], method="pearson")
##round(cor.mat,2) # all pairwise correlations
par(mar=c(3,3,0.5,0.5), mgp=c(1.5,0.5,0), las=2)
pairs(dat[,4:ncol(dat)], pch=20, cex=0.5, col="blue")
pheatmap(dat)
least square
library(pheatmap)
pheatmap(dat)
pheatmap(cor(dat))
## compute correlation
cor(dat$stab.glu,dat$hip)
##
## test for significance
cor.test(dat$stab.glu,dat$hip)
dat = dat[apply(dat,1,function(x) {sum(is.na(x))==0}),]
l.g = lm(chol ~ glyhb, data=dat)
summary(l.g)
# normal distribution of residuals?
hist(l.g$residuals,breaks=20)
##
qqnorm(l.g$residuals);qqline(l.g$residuals)
##
## correlation residuals x-values?
cor(dat$glyhb,l.g$residuals)
plot(dat$glyhb,l.g$residuals,pch=20)
plot(dat$chol,l.g$fitted.values,pch=20,col='blue', xlab='Real values',ylab='Predicted values');abline(0,1,col='red')
reg.analysis <- apply(dat,2,function(x){
regs <- lm(chol ~ x, data=dat)
regs2 <- summary(regs)
})
reg.analysis <- apply(dat,2,function(x){
regs <- lm(chol ~ x, data=dat)
regs2 <- summary(regs)
})
reg.analysis <- apply(dat,2,function(x){
regs <- lm(chol ~ x, data=dat)
regs2 <- summary(regs)$fstatistic[["value"]]
})
reg.analysis <- apply(dat,2,function(x){
regs <- lm(chol ~ x, data=dat)
regs2 <- summary(regs)$fstatistic[["value"]]
})
reg.analysisi
reg.analysis <- apply(dat,2,function(x){
regs <- lm(chol ~ x, data=dat)
regs2 <- summary(regs)$fstatistic[["value"]]
})
reg.analysisis
reg.analysis <- apply(dat,2,function(x){
regs <- lm(chol ~ x, data=dat)
regs2 <- summary(regs)$fstatistic[["value"]]
})
reg.analysis
reg.analysis <- apply(dat,2,function(x){
regs <- lm(chol ~ x, data=dat)
regs2 <- summary(regs)$fstatistic[["value"]]
})
reg.analysis
plot(reg.analysis[-1])
help(plot)
plot(reg.analysis[-1])
labels(reg.analysis)
plot(reg.analysis[-1], labels(reg.analysis))
plot(reg.analysis[-1], axis(labels = labels(reg.analysis)))
plot(reg.analysis[-1], axis(labels = labels(reg.analysis), side=1))
plot(reg.analysis[-1])
values = c(1,2,3,4)
probabilities= c(0.25,0.5,0.75,1)
# Distribution 1: Mean = 2, Standard Deviation = 1
pnorm(values, mean = 2, sd = 1)
qnorm(probabilities, mean=2,sd = 1)
# Distribution 2: Mean = 2, Standard Deviation = 2
pnorm(values, mean = 2, sd = 2)
qnorm(probabilities, mean=2,sd = 2)
# Distribution 2: Mean = 4, Standard Deviation = 1
pnorm(values, mean = 4, sd = 1)
qnorm(probabilities, mean=4,sd = 1)
values = c(1,2,3,4)
probabilities= c(0.25,0.5,0.75,1)
# Distribution 1: Mean = 2, Standard Deviation = 1
pnorm(values, mean = 2, sd = 1)
qnorm(probabilities, mean=2,sd = 1)
# Distribution 2: Mean = 2, Standard Deviation = 2
pnorm(values, mean = 2, sd = 2)
qnorm(probabilities, mean=2,sd = 2)
# Distribution 2: Mean = 4, Standard Deviation = 1
pnorm(values, mean = 4, sd = 1)
qnorm(probabilities, mean=4,sd = 1)
values = c(1,2,3,4)
probabilities= c(0.25,0.5,0.75,1)
# Distribution 1: Mean = 2, Standard Deviation = 1
pnorm(values, mean = 2, sd = 1)
qnorm(probabilities, mean=2,sd = 1)
# Distribution 2: Mean = 2, Standard Deviation = 2
##pnorm(values, mean = 2, sd = 2)
##qnorm(probabilities, mean=2,sd = 2)
# Distribution 2: Mean = 4, Standard Deviation = 1
##pnorm(values, mean = 4, sd = 1)
#qnorm(probabilities, mean=4,sd = 1)
values = c(1,2,3,4)
probabilities= c(0.25,0.5,0.75,1)
# Distribution 1: Mean = 2, Standard Deviation = 1
pnorm(values, mean = 2, sd = 1)
qnorm(probabilities, mean=2,sd = 1)
# Distribution 2: Mean = 2, Standard Deviation = 2
pnorm(values, mean = 2, sd = 2)
qnorm(probabilities, mean=2,sd = 2)
# Distribution 2: Mean = 4, Standard Deviation = 1
##pnorm(values, mean = 4, sd = 1)
#qnorm(probabilities, mean=4,sd = 1)
values = c(1,2,3,4)
probabilities= c(0.25,0.5,0.75,1)
# Distribution 1: Mean = 2, Standard Deviation = 1
pnorm(values, mean = 2, sd = 1)
qnorm(probabilities, mean=2,sd = 1)
# Distribution 2: Mean = 2, Standard Deviation = 2
pnorm(values, mean = 2, sd = 2)
qnorm(probabilities, mean=2,sd = 2)
# Distribution 2: Mean = 4, Standard Deviation = 1
pnorm(values, mean = 4, sd = 1)
qnorm(probabilities, mean=4,sd = 1)
values = c(1,2,3,4)
probabilities= c(0.25,0.5,0.75,1)
# Distribution 1: Mean = 2, Standard Deviation = 1
pnorm(values, mean = 2, sd = 1)
qnorm(probabilities, mean=2,sd = 1)
# Distribution 2: Mean = 2, Standard Deviation = 2
pnorm(values, mean = 2, sd = 2)
qnorm(probabilities, mean=2,sd = 2)
# Distribution 2: Mean = 4, Standard Deviation = 1
pnorm(values, mean = 4, sd = 1)
qnorm(probabilities, mean=4,sd = 1)
qqnorm(rpois(seq(0.01,0.99.0.005),lambda = 5))
qqnorm(rpois(seq(0.01,0.99,0.005),lambda = 5))
rpois(seq(0.01,0.99,0.005)
lambda = 5
rpois(seq(0.01,0.99,0.005),lambda = 5)
rpois(seq(0.01,0.99,0.005),lambda = 100)
?rpois
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
BiocManager::install(c("vsn", "affy"))
BiocManager::install(c("vsn", "affy"))
library(BiocManager)
BiocManager::install(c("vsn", "affy"))
install.packages("vsn", dependencies = TRUE)
library(affy)
library(vsn)
knitr::opts_chunk$set(echo = TRUE)
library("vsn")
library("affy")
install.packages(("tidyverse"), dependencies = TRUE)
library(tidyverse)
library("vsn")
library("affy")
library("tidyverse")
library("vsn")
library("affy")
library("tidyverse")
library("Rcpp")
BiocManager::install("AnnotationDbi")
library("vsn")
library("affy")
library("tidyverse")
library("Rcpp")
library("ggplot2")
library("AnnotationDbi")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("AnnotationDbi")
library("vsn")
library("affy")
library("tidyverse")
library("Rcpp")
library("ggplot2")
library("AnnotationDbi")
install.packages(c("maps", "mapproj"))
install.packages("hgu133plus2hsenstcdf)
install.packages("hgu133plus2hsenstcdf")
install.packages("C:/Linda/Uni/Kurse/SoSe22/Data Analysis/Packages/hgu133plus2hsenstcdf_25.0.0.zip", repos = NULL, type = "win.binary")
install.packages("C:/Linda/Uni/Kurse/SoSe22/Data Analysis/Packages/hgu133plus2hsenstcdf_25.0.0.zip", repos = NULL, type = "binary")
install.packages("Rtools")
install.packages("C:/Linda/Uni/Kurse/SoSe22/Data Analysis/Packages/hgu133plus2hsenstcdf_25.0.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Linda/Uni/Kurse/SoSe22/Data Analysis/Packages/hgu133plus2hsenstprobe_25.0.0.tar.gz", repos = NULL, type = "source")
install.packages("hexbin")
install.packages("pheatmap")
library("vsn")
library("affy")
library("tidyverse")
library("Rcpp")
library("ggplot2")
library("AnnotationDbi")
library("readr")
library("limma")
library("mapproj")
library("maps")
library("hgu133plus2hsenstcdf")
library("hgu133plus2hsenstprobe")
library("hexbin")
library("pheatmap")
library("vsn")
library("affy")
library("tidyverse")
library("Rcpp")
library("ggplot2")
library("AnnotationDbi")
library("readr")
library("limma")
library("maps")
library("mapproj")
library("hgu133plus2hsenstcdf")
library("hgu133plus2hsenstprobe")
library("hexbin")
library("pheatmap")
library("vsn")
library("affy")
library("tidyverse")
library("Rcpp")
library("ggplot2")
library("AnnotationDbi")
library("readr")
library("limma")
library("maps")
library("mapproj")
library("hgu133plus2hsenstcdf")
library("hgu133plus2hsenstprobe")
library("hexbin")
library("pheatmap")
dev.copy2pdf(file = file.name)
dev.off()
library(vsn)
library(AnnotationDbi)
library(AnnotationDbi)
library(limma)
library(pheatmap)
library(dplyr)
library(RColorBrewer)
library(gplots) #for heatmap
library(cluster) # clustering algorithms
library(factoextra)
library(dplyr)
library("Rcpp")
library("tidyverse")
library("affy")
library("vsn")
library("AnnotationDbi")
library("ggplot2")
library("readr")
library("hgu133plus2hsenstcdf")
library("hgu133plus2hsenstprobe")
library("hexbin")
# 2) Read in .CEL files
setwd("C:\Users\LKaup\OneDrive\Dokumente\Data Analysis\2022-topic-04-team-03\Data\rawData")
getwd()
# 2) Read in .CEL files
setwd("C:\\Users\\LKaup\\OneDrive\\Dokumente\\Data Analysis\\2022-topic-04-team-03\\Data\\rawData")
setwd("C:\\Linda\\Uni\\Kurse\\SoSe22\\Data Analysis\\Quality Control")
# 2) Read in .CEL files
setwd("C:\\Users\\LKaup\\OneDrive\\Dokumente\\Data Analysis\\2022-topic-04-team-03\\Data\\rawData")
data.human=ReadAffy()
data.human@cdfName <- "HGU133Plus2_Hs_ENST"
setwd("C:\\Linda\\Uni\\Kurse\\SoSe22\\Data Analysis\\Quality Control")
save.image(file="rawdata_human_18290.rda")
# 3) Quality control
# 3.1) Single chip control
# GSM456643
image(data.human[,1], col=rainbow(100, start=0, end=0.75)[100:1])
# GSM456644
image(data.human[,2], col=rainbow(100, start=0, end=0.75)[100:1])
# GSM456645
image(data.human[,3], col=rainbow(100, start=0, end=0.75)[100:1])
# GSM456646
image(data.human[,4], col=rainbow(100, start=0, end=0.75)[100:1])
# GSM456647
image(data.human[,5], col=rainbow(100, start=0, end=0.75)[100:1])
# GSM456648
image(data.human[,6], col=rainbow(100, start=0, end=0.75)[100:1])
# GSM456649
image(data.human[,7], col=rainbow(100, start=0, end=0.75)[100:1])
# GSM456650
image(data.human[,8], col=rainbow(100, start=0, end=0.75)[100:1])
# GSM456651
image(data.human[,9], col=rainbow(100, start=0, end=0.75)[100:1])
# GSM456652
image(data.human[,10], col=rainbow(100, start=0, end=0.75)[100:1])
# GSM456653
image(data.human[,11], col=rainbow(100, start=0, end=0.75)[100:1])
# GSM456654
image(data.human[,12], col=rainbow(100, start=0, end=0.75)[100:1])
# GSM456655
image(data.human[,13], col=rainbow(100, start=0, end=0.75)[100:1]) #->very bright?
# GSM456656
image(data.human[,14], col=rainbow(100, start=0, end=0.75)[100:1])
# GSM456657
image(data.human[,15], col=rainbow(100, start=0, end=0.75)[100:1])
# GSM456658
image(data.human[,16], col=rainbow(100, start=0, end=0.75)[100:1])
# GSM456659
image(data.human[,17], col=rainbow(100, start=0, end=0.75)[100:1])
# GSM456660
image(data.human[,18], col=rainbow(100, start=0, end=0.75)[100:1])
# 3.2) Normalization
human.vsnrma <- vsnrma(data.human)
setwd("C:\\Users\\LKaup\\OneDrive\\Dokumente\\Data Analysis\\2022-topic-04-team-03\\Data\\rawData")
save.image(file="normalized_human_data_18290.rda")
# 3.3) meanSdPlot
meanSdPlot(human.vsnrma)
setwd("C:\\Users\\LKaup\\OneDrive\\Dokumente\\Data Analysis\\2022-topic-04-team-03\\Data\\rawData") # was ist das?#
dev.copy2eps(file="meanSdPlot_human_vsnrma_normalized.eps")
# 3.4) Boxplot
# Before normalization:
par(las=2)
mmi=c(1,0.7,1.0477939,0.5366749)
par(mai=mmi)
boxplot(data.human, col= rainbow(35), cex.axis=0.5, main="Gene expression in human embryogenesis data before normalization")
dev.copy2eps(file="boxplot_rawdata_18290.eps")
# After Normalization:
boxplot(exprs(human.vsnrma), col= rainbow(35), cex.axis=0.5, main="Gene expression in human embryogenesis data after normalization")
dev.copy2eps(file="boxplot_normalizeddata_18290.eps")
dev.off() # what does this function do?
# 3.5) Density plot
# Before Normalization:
hist(data.human, col=rainbow(35), main="Density function of log Intensity of human embryogenesis raw data")
dev.copy2pdf(file="Histogram_rawdata_39897.pdf", width = 10, height = 7)
# After Normalization:
eset=exprs(human.vsnrma)
plot(density(eset[,1]), type="n", xlab="log Intensity", ylim=c(0,1), main="Density function of log Intensity of human embryogenesis normalized")
for (i in 1:ncol(eset)) {
lines(density(eset[,i]), col=rainbow(35)[i])
}
dev.copy2pdf(file="Histogram_NormalizedData_39897.pdf", width = 10, height = 7)
# 3.6) RNA Degradation Plot
par(mfrow = c(2,1))
rnadeg.raw = AffyRNAdeg(data.human)
plotAffyRNAdeg(rnadeg.raw, col=rainbow(35))
title(sub="human embroyogenesis rawdata")
plotAffyRNAdeg(rnadeg.raw, col=rainbow(35), transform= "shift.only")
title(sub="human embryogenesis rawdata - shifted")
dev.copy2pdf(file="RNAdegrad_plot.pdf", width = 12.5, height = 20)
dev.off()
# 3.7) Scatter plot
eset <- exprs(human.vsnrma)
for(i in 1:9){
plot(eset[,c(i,i+1)], pch=".", cex=2)
abline(0, 1, col="red")               # 45 degree dividing line
title(main = paste("Scatterplot of probe",
substr(colnames(human.vsnrma)[i], 1, nchar(colnames(human.vsnrma)[i])), "and",
substr(colnames(human.vsnrma)[i+1], 1, nchar(colnames(human.vsnrma)[i+1])),
sep=" ", collapse = NULL))
file.name <- paste("C:\\Users\\LKaup\\OneDrive\\Dokumente\\Data Analysis\\2022-topic-04-team-03\\Data\\rawData",
as.character(substr(colnames(human.vsnrma)[i], 1, nchar(colnames(human.vsnrma)[i]))), "_",
as.character(substr(colnames(human.vsnrma)[i+1], 1, nchar(colnames(human.vsnrma)[i+1]))),
".pdf", sep="")
dev.copy2pdf(file = file.name)
dev.off()
}
