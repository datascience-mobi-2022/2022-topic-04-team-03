SEA.function = function(x){
enrich_kegg = kegga(x, geneid = annotated.human.vsnrma.df2$entrez, species = "Hs")
topKEGG(enrich_kegg)
}
SEA.1.2 = SEA.function(fit.1.2)
# No DE genes
SEA.1.4 = SEA.function(fit.1.4)
SEA.1.8 = SEA.function(fit.1.8)
SEA.1.m = SEA.function(fit.1.m)
SEA.1.b = SEA.function(fit.1.b)
SEA.2.4 = SEA.function(fit.2.4)
SEA.2.8 = SEA.function(fit.2.8)
SEA.2.m = SEA.function(fit.2.m)
SEA.2.b = SEA.function(fit.2.b)
SEA.4.8 = SEA.function(fit.4.8)
SEA.4.m = SEA.function(fit.4.m)
SEA.4.b = SEA.function(fit.4.b)
SEA.8.m = SEA.function(fit.8.m)
SEA.8.b = SEA.function(fit.8.b)
SEA.m.b = SEA.function(fit.m.b)
SEA.function.GO = function(x){
enrich_go = goana(x, geneid = annotated.human.vsnrma.df2$entrez, species = "Hs")
topGO(enrich_go)
}
SEA.function.GO = function(x){
enrich_go = goana(x, geneid = annotated.human.vsnrma.df2$entrez, species = "Hs")
topGO(enrich_go)
}
SEA.function.GO = function(x){
enrich_go = goana(x, geneid = annotated.human.vsnrma.df2$entrez, species = "Hs")
topGO(enrich_go)
}
enrich_go
view(enrich_go)
SEA.function.GO(fit.8.m)
BiocManager::install(c("GO.db"))
SEA.function.GO(fit.8.m)
library(affy)
library(vsn)
library(AnnotationDbi)
library(hgu133plus2hsenstcdf)
library(hgu133plus2hsenstprobe)
library(limma)
library(pheatmap)
library(dplyr)
library(tidyverse)
library(hexbin)
library(cluster)
library(factoextra)
library(EnhancedVolcano)
library(org.Hs.eg.db)
library(RColorBrewer)
library(VennDiagram)
library(Go.db)
SEA.function.GO = function(x){
enrich_go = goana(x, geneid = annotated.human.vsnrma.df2$entrez, species = "Hs")
topGO(enrich_go, ontology ="BP")
}
SEA.function.GO(fit.8.m)
SEA.function.GO = function(x){
enrich_go = goana(x, geneid = annotated.human.vsnrma.df2$entrez, species = "Hs")
topGO(enrich_go, ontology ="BP")
}
knitr::opts_chunk$set(include=FALSE, echo = FALSE, fig.align = 'centre', message=FALSE)
knitr::opts_knit$set(root.dir = "")
getwd()
#group the genes into "Up-regulated","Down-regulated" and "Unchanged" for colouring volcanoplot. We definded a gene as up/down-regulated wenn the LogFC is higher than 2 or smaller than -2
#for the stage between 1-cell and 8-cell stage
annotated.limma.table.vollst.1.8 <- annotated.limma.table.vollst.1.8 %>%
mutate(
Expression = case_when(logFC > 2 & adj.P.Val < 0.01 ~ "Up-regulated",
logFC < -2 & adj.P.Val < 0.01 ~ "Down-regulated",
TRUE ~ "Unchanged"))
#extract 10 highst up-regulated TRAs and 10 highst down-regulated TRAs arranged by both logFC and adj.P.Value
top <- 20
top_genes_tra.1.8 <- bind_rows(
annotated.limma.1.8.tra %>%
filter(logFC >2) %>%
arrange(adj.P.Val,desc(abs(logFC))) %>%
head(top),
annotated.limma.1.8.tra %>%
filter(logFC< -2) %>%
arrange(adj.P.Val,desc(abs(logFC)))
%>%head(top)
)
setwd("~//documents//GitHub//2022-topic-04-team-03//Tables")
write.csv(top_genes_tra.1.8, file="top_genes_tra.1.8.csv")
view(top_genes_tra.1.8)
names = c("1 cell stage, rep 1", "1 cell stage, rep 2", "1 cell stage, rep 3",
"2 cell stage, rep 1", "2 cell stage, rep 2", "2 cell stage, rep 3",
"4 cell stage, rep 1", "4 cell stage, rep 2", "4 cell stage, rep 3",
"8 cell stage, rep 1", "8 cell stage, rep 2", "8 cell stage, rep 3",
"morula stage, rep 1", "morula stage, rep 2", "morula stage, rep 3",
"blastocyst stage, rep 1", "blastocyst stage, rep 2", "blastocyst stage, rep 3")
# Rename colnames of our dataset: "x stage, rep y" for a better overview
colnames(human.vsnrma.df2) = names
# Define the different stages of the chips in a vector
stage = factor(x= c(1,1,1,2,2,2,4,4,4,8,8,8,"morula","morula","morula", "blastocyst", "blastocyst", "blastocyst"),levels= c(1,2,4,8,"morula","blastocyst"))
# Create a design matrix with the stages
design = model.matrix(~0 + stage)
# Create a contrast matrix which compares all the stages with one another
cm = makeContrasts(stage1.2 = stage2-stage1, stage1.4 = stage4-stage1, stage1.8 = stage8-stage1, stage1.morula = stagemorula-stage1, stage1.blastocyst =stageblastocyst-stage1,
stage2.4 = stage4-stage2, stage2.8 = stage8-stage2, stage2.morula = stagemorula-stage2,  stage2.blastocyst = stageblastocyst-stage2,
stage4.8 = stage8-stage4, stage4.morula = stagemorula-stage4,  stage4.blastocyst = stageblastocyst-stage4,
stage8.morula = stagemorula-stage8, stage8.blastocyst = stageblastocyst-stage8,
stagemorula.blastocyst =stageblastocyst -stagemorula,
levels = design)
# Fit the coefficients of the model
fit = lmFit(human.vsnrma.df2, design)
fit2 = contrasts.fit(fit, contrasts = cm)
# Calculate the t-statistics
fit2 = eBayes(fit2)
# Number of differentially expressed genes (p-value = 0.05)
results = decideTests(fit2, p.value = 0.05)
summary(results)
# Number of differentially expressed genes (p-value = 0.01)
results2 = decideTests(fit2, p.value = 0.01)
summary(results2)
# Create fits for every contrast and then create tables with the results of Limma analysis
# Stage 1-2
fit.1.2 = contrasts.fit(fit, contrasts = cm[,1])
fit.1.2 = eBayes(fit.1.2)
pvalue01 = sum(p.adjust(fit.1.2$p.value, "BH") < 0.01)
# 0
pvalue05 = sum(p.adjust(fit.1.2$p.value, "BH") < 0.05)
# 0
view(cm)
setwd("~//documents//GitHub//2022-topic-04-team-03//Tables")
fit.function = function(i){
fit.table = contrasts.fit(fit, contrasts = cm[,i])
fit.table = eBayes(fit.table)
}
fit.1.2 = fit.function(1)
fit.1.4 = fit.function(2)
fit.1.8 = fit.function(3)
fit.1.m = fit.function(4)
fit.1.b = fit.function(5)
fit.2.4 = fit.function(6)
fit.2.8 = fit.function(7)
fit.2.m = fit.function(8)
fit.2.b = fit.function(9)
fit.4.8 = fit.function(10)
fit.4.m = fit.function(11)
fit.4.b = fit.function(12)
fit.8.m = fit.function(13)
fit.8.b = fit.function(14)
fit.m.b = fit.function(15)
top.table = function(i){
fit.table = contrasts.fit(fit, contrasts = cm[,i])
fit.table = eBayes(fit.table)
pvalue01 = sum(p.adjust(fit.table$p.value, "BH") < 0.01)
topTable(fit.table, number = pvalue01)
}
limma.table.1.2 = top.table(1)
limma.table.1.4 = top.table(2)
limma.table.1.8 = top.table(3)
limma.table.1.m = top.table(4)
limma.table.1.b = top.table(5)
limma.table.2.4 = top.table(6)
limma.table.2.8 = top.table(7)
limma.table.2.m = top.table(8)
limma.table.2.b = top.table(9)
limma.table.4.8 = top.table(10)
limma.table.4.m = top.table(11)
limma.table.4.b = top.table(12)
limma.table.8.m = top.table(13)
limma.table.8.b = top.table(14)
limma.table.m.b = top.table(15)
limma.annotation = function(x){
a = which(ensembl.transcripts %in% rownames(x))
ensembl.new = ensembl.data[a,]
b = which(rownames(x) %in% ensembl.new$Transcript.stable.ID)
x.new = x[b,]
ensembl.new = arrange(ensembl.new,Transcript.stable.ID)
x.new = arrange(x.new, rownames(x.new))
annotated.x = cbind(x.new, ensembl.new$Gene.name, ensembl.new$Gene.description,ensembl.new$Chromosome.scaffold.name, ensembl.new$Gene.stable.ID)
colnames(annotated.x)[7:10]<-c("gene.name","gene.description","Chromosome.scaffold.name", "Gene.stable.ID")
annotated.x = arrange(annotated.x, adj.P.Val)
return(annotated.x)
}
annotated.limma.1.8 = limma.annotation(limma.table.1.8)
annotated.limma.1.m = limma.annotation(limma.table.1.m)
annotated.limma.1.b = limma.annotation(limma.table.1.b)
#annotated.limma.2.4 = limma.annotation(limma.table.2.4)
annotated.limma.2.8 = limma.annotation(limma.table.2.8)
annotated.limma.2.m = limma.annotation(limma.table.2.m)
annotated.limma.2.b = limma.annotation(limma.table.2.b)
annotated.limma.4.8 = limma.annotation(limma.table.4.8)
annotated.limma.4.m = limma.annotation(limma.table.4.m)
annotated.limma.4.b = limma.annotation(limma.table.4.b)
annotated.limma.8.m = limma.annotation(limma.table.8.m)
annotated.limma.8.b = limma.annotation(limma.table.8.b)
annotated.limma.m.b = limma.annotation(limma.table.m.b)
#annotated limma tables mit TRAs annotaten
#1.4 und 1.2 sind 00
annotated.limma.1.8$ensembl.transcript = rownames(annotated.limma.1.8)
annotated.limma.1.8.tra <- merge(annotated.limma.1.8, tra.data, by = 'ensembl.transcript')
annotated.limma.1.m$ensembl.transcript = rownames(annotated.limma.1.m)
annotated.limma.1.m.tra <- merge(annotated.limma.1.m, tra.data, by = 'ensembl.transcript')
annotated.limma.1.b$ensembl.transcript = rownames(annotated.limma.1.b)
annotated.limma.1.b.tra <- merge(annotated.limma.1.b, tra.data, by = 'ensembl.transcript')
#2.4. ist 00
annotated.limma.2.8$ensembl.transcript = rownames(annotated.limma.2.8)
annotated.limma.2.8.tra <- merge(annotated.limma.2.8, tra.data, by = 'ensembl.transcript')
annotated.limma.2.m$ensembl.transcript = rownames(annotated.limma.2.m)
annotated.limma.2.m.tra <- merge(annotated.limma.2.m, tra.data, by = 'ensembl.transcript')
annotated.limma.2.b$ensembl.transcript = rownames(annotated.limma.2.b)
annotated.limma.2.b.tra <- merge(annotated.limma.2.b, tra.data, by = 'ensembl.transcript')
annotated.limma.4.8$ensembl.transcript = rownames(annotated.limma.4.8)
annotated.limma.4.8.tra <- merge(annotated.limma.4.8, tra.data, by = 'ensembl.transcript')
annotated.limma.4.m$ensembl.transcript = rownames(annotated.limma.4.m)
annotated.limma.4.m.tra <- merge(annotated.limma.4.m, tra.data, by = 'ensembl.transcript')
annotated.limma.4.b$ensembl.transcript = rownames(annotated.limma.4.b)
annotated.limma.4.b.tra <- merge(annotated.limma.4.b, tra.data, by = 'ensembl.transcript')
annotated.limma.8.m$ensembl.transcript = rownames(annotated.limma.8.m)
annotated.limma.8.m.tra <- merge(annotated.limma.8.m, tra.data, by = 'ensembl.transcript')
annotated.limma.8.b$ensembl.transcript = rownames(annotated.limma.8.b)
annotated.limma.8.b.tra <- merge(annotated.limma.8.b, tra.data, by = 'ensembl.transcript')
annotated.limma.m.b$ensembl.transcript = rownames(annotated.limma.m.b)
annotated.limma.m.b.tra <- merge(annotated.limma.m.b, tra.data, by = 'ensembl.transcript')
#find out repeating transcripts in ensembl.data
n_occur=data.frame(table(ensembl.data$Transcript.stable.ID))
n_occur=arrange(n_occur,desc(n_occur$Freq))
a=sum(n_occur$Freq>1)
duplicate.ensembl=n_occur$Var1[1:40]
j=which(ensembl.data$Transcript.stable.ID%in%duplicate.ensembl)
ensembl.duplicate=ensembl.data[j,]
ensembl.duplicate=arrange(ensembl.duplicate,ensembl.duplicate$Transcript.stable.ID)
#delete the repeating transcripts
Nth.delete<-function(dataframe, n)dataframe[-(seq(n,to=nrow(dataframe),by=n)),]
ensembl.duplicate.genes=Nth.delete(ensembl.duplicate, 2)
ensembl.unique=rbind(ensembl.data[-j,],ensembl.duplicate.genes)
generate.limma.table.vollst = function(fit,n){
fit.1 = contrasts.fit(fit, contrasts = cm[,n])
fit.1 = eBayes(fit.1)
limma.table.vollst=topTable(fit.1,number = dim(fit.1)[1])
return(limma.table.vollst)
}
limma.table.vollst.1.2=generate.limma.table.vollst(fit,1)
limma.table.vollst.1.4=generate.limma.table.vollst(fit,2)
limma.table.vollst.1.8=generate.limma.table.vollst(fit,3)
limma.table.vollst.1.m=generate.limma.table.vollst(fit,4)
limma.table.vollst.1.b=generate.limma.table.vollst(fit,5)
limma.table.vollst.2.4=generate.limma.table.vollst(fit,6)
limma.table.vollst.2.8=generate.limma.table.vollst(fit,7)
limma.table.vollst.2.m=generate.limma.table.vollst(fit,8)
limma.table.vollst.2.b=generate.limma.table.vollst(fit,9)
limma.table.vollst.4.8=generate.limma.table.vollst(fit,10)
limma.table.vollst.4.m=generate.limma.table.vollst(fit,11)
limma.table.vollst.4.b=generate.limma.table.vollst(fit,12)
limma.table.vollst.8.m=generate.limma.table.vollst(fit,13)
limma.table.vollst.8.b=generate.limma.table.vollst(fit,14)
limma.table.vollst.m.b=generate.limma.table.vollst(fit,15)
ensembl.limma.annotation <- function(x){
a = which(ensembl.unique$Transcript.stable.ID %in% rownames(x))
ensembl.new = ensembl.unique[a,]
b = which(rownames(x)%in% ensembl.new$Transcript.stable.ID)
x.new = x[b,]
ensembl.new = arrange(ensembl.new,ensembl.new$Transcript.stable.ID)
x.new = arrange(x.new, rownames(x.new))
annotated.x = cbind(x.new, ensembl.new$Gene.name, ensembl.new$Gene.description,ensembl.new$Chromosome.scaffold.name)
colnames(annotated.x)[7:9]<-c("gene.name","gene.description","Chromosome.scaffold.name")
annotated.x = arrange(annotated.x, adj.P.Val)
return(annotated.x)
}
annotated.limma.table.vollst.1.8 = ensembl.limma.annotation(limma.table.vollst.1.8)
annotated.limma.table.vollst.8.m = ensembl.limma.annotation(limma.table.vollst.8.m)
annotated.limma.table.vollst.m.b = ensembl.limma.annotation(limma.table.vollst.m.b)
#for the stage between 1-cell and 8-cell stage
annotated.limma.table.vollst.1.8 <- annotated.limma.table.vollst.1.8 %>%
mutate(
Expression = case_when(logFC > 2 & adj.P.Val < 0.01 ~ "Up-regulated",
logFC < -2 & adj.P.Val < 0.01 ~ "Down-regulated",
TRUE ~ "Unchanged"))
#extract 10 highst up-regulated TRAs and 10 highst down-regulated TRAs arranged by both logFC and adj.P.Value
top <- 20
top_genes_tra.1.8 <- bind_rows(
annotated.limma.1.8.tra %>%
filter(logFC >2) %>%
arrange(adj.P.Val,desc(abs(logFC))) %>%
head(top),
annotated.limma.1.8.tra %>%
filter(logFC< -2) %>%
arrange(adj.P.Val,desc(abs(logFC)))
%>%head(top)
)
setwd("~//documents//GitHub//2022-topic-04-team-03//Tables")
write.csv(top_genes_tra.1.8, file="top_genes_tra.1.8.csv")
view(top_genes_tra.1.8)
color1 = c(rep("red",3),rep("orange",3),rep("yellow",3),rep("green",3),rep("blue",3),rep("purple",3))
par(mar=c(5, 4, 4, 10), xpd=TRUE)
plot(pca$x[,1], pca$x[,2],col=color, pch=19,xlab='PC1',ylab='PC2')
color2= c("red","orange","yellow","green","blue","purple")
legend(x = 190,y=130,legend = c("1-cell stage", "2-cell stage","4-cell stage", "8-cell stage", "Morula stage","Blastocyst stage"), fill= color2,col = color2)
#Plot PC2 and PC3
plot(pca$x[,2], pca$x[,3],col=color, pch=19,xlab='PC2',ylab='PC3')
#Plot PC3 and PC4
plot(pca$x[,3], pca$x[,4],col=color, pch=19,xlab='PC3',ylab='PC4')
#Erstellen Means pro stage pro tissue
n_occur1.8=data.frame(table(annotated.limma.1.8.tra$max.tissue))
tissue.vector1.8=c()
for (i in 1:53) {
tissue.genes=which(annotated.limma.1.8.tra$max.tissue %in% n_occur1.8$Var1[i])
tissue.vector1.8[[i]]= mean(c(annotated.limma.1.8.tra[tissue.genes,2]))
}
n_occur1.m=data.frame(table(annotated.limma.1.m.tra$max.tissue))
tissue.vector1.m=c()
for (i in 1:53) {
tissue.genes=which(annotated.limma.1.m.tra$max.tissue %in% n_occur1.m$Var1[i])
tissue.vector1.m[[i]]= mean(c(annotated.limma.1.m.tra[tissue.genes,2]))
}
n_occur1.b=data.frame(table(annotated.limma.1.b.tra$max.tissue))
tissue.vector1.b=c()
for (i in 1:53) {
tissue.genes=which(annotated.limma.1.b.tra$max.tissue %in% n_occur1.b$Var1[i])
tissue.vector1.b[[i]]= mean(c(annotated.limma.1.b.tra[tissue.genes,2]))
}
tissue.vector1.2=c()
tissue.vector1.2[1:53] =0
tissue.vector1.4=c()
tissue.vector1.4[1:53] =0
#Erstellen Plot Data
tissue.matrix = cbind(tissue.vector1.2,tissue.vector1.4,tissue.vector1.8,tissue.vector1.m,tissue.vector1.b)
rownames(tissue.matrix) = n_occur1.8$Var1[1:53]
tissue.matrix= cbind(rownames(tissue.matrix),tissue.matrix)
tissue.matrix= as_tibble(tissue.matrix)
tissue.matrix=pivot_longer(tissue.matrix, cols=tissue.vector1.2:tissue.vector1.b, names_to = "stages" ,values_to="logFc")
#plot# Fragggeee???
ggplot(tissue.matrix, aes(x = stages, y= as.numeric(logFc),group=as.character(V1)))  + geom_line(aes(color=as.character(V1))) +
geom_point(aes(color=as.character(V1))) + labs(y=("logFC")) + labs(colour = "tissues")
knitr::opts_chunk$set(echo = TRUE)
library(affy)
library(vsn)
library(AnnotationDbi)
library(hgu133plus2hsenstcdf)
library(hgu133plus2hsenstprobe)
library(limma)
library(pheatmap)
library(dplyr)
library(tidyverse)
library(hexbin)
setwd("~//documents//GitHub//2022-topic-04-team-03//Data//rawData")
data.human=ReadAffy()
data.human@cdfName <- "HGU133Plus2_Hs_ENST"
human.vsnrma <- vsnrma(data.human)
setwd("~//documents//GitHub//2022-topic-04-team-03//Plots")
expression.data <- exprs(human.vsnrma)
setwd("~//documents//GitHub//2022-topic-04-team-03//Tables")
ensembl.data <- read.csv("ensembl.human.txt")
# create variables that contain gene ID, transcript ID,
#the chromosome name and the gene symbol
ensembl.genes = ensembl.data[,1]
ensembl.transcripts = ensembl.data[,3]
ensembl.chromosome = ensembl.data[,7]
ensembl.symbols = ensembl.data[,9]
# Create a data frame out of the expression data from the normalized data
human.vsnrma.df = data.frame(exprs(human.vsnrma))
# exclude Affymetrix control genes which begin with "AFFX"
human.vsnrma.df2 = human.vsnrma.df[63:95721,]
dim(human.vsnrma.df2)
# 95,659    18
# remove ".xx_at" from the rownames
rownames(human.vsnrma.df2) = substr(rownames(human.vsnrma.df2), 1,15)
# read in TRA data for human
tra.data <- read.table("tra.2017.human.gtex.5x.table.tsv",header=TRUE)
names = c("1 cell stage, rep 1", "1 cell stage, rep 2", "1 cell stage, rep 3",
"2 cell stage, rep 1", "2 cell stage, rep 2", "2 cell stage, rep 3",
"4 cell stage, rep 1", "4 cell stage, rep 2", "4 cell stage, rep 3",
"8 cell stage, rep 1", "8 cell stage, rep 2", "8 cell stage, rep 3",
"morula stage, rep 1", "morula stage, rep 2", "morula stage, rep 3",
"blastocyst stage, rep 1", "blastocyst stage, rep 2", "blastocyst stage, rep 3")
# Rename colnames of our dataset: "x stage, rep y" for a better overview
colnames(human.vsnrma.df2) = names
# Define the different stages of the chips in a vector
stage = factor(x= c(1,1,1,2,2,2,4,4,4,8,8,8,"morula","morula","morula", "blastocyst", "blastocyst", "blastocyst"),levels= c(1,2,4,8,"morula","blastocyst"))
# Create a design matrix with the stages
design = model.matrix(~0 + stage)
# Create a contrast matrix which compares all the stages with one another
cm = makeContrasts(stage1.2 = stage1-stage2, stage1.4 = stage1-stage4, stage1.8 = stage1-stage8, stage1.morula = stage1-stagemorula, stage1.blastocyst = stage1-stageblastocyst,
stage2.4 = stage2-stage4, stage2.8 = stage2-stage8, stage2.morula = stage2-stagemorula,  stage2.blastocyst = stage2-stageblastocyst,
stage4.8 = stage4-stage8, stage4.morula = stage4-stagemorula,  stage4.blastocyst = stage4-stageblastocyst,
stage8.morula = stage8-stagemorula, stage8.blastocyst = stage8-stageblastocyst,
stagemorula.blastocyst = stagemorula-stageblastocyst,
levels = design)
# Fit the coefficients of the model
fit = lmFit(human.vsnrma.df2, design)
fit2 = contrasts.fit(fit, contrasts = cm)
# Calculate the t-statistics
fit2 = eBayes(fit2)
# Number of differentially expressed genes (p-value = 0.05)
results = decideTests(fit2, p.value = 0.05)
summary(results)
# Number of differentially expressed genes (p-value = 0.01)
results2 = decideTests(fit2, p.value = 0.01)
summary(results2)
# Create fits for every contrast and then create tables with the results of Limma analysis
# Stage 1-2
fit.1.2 = contrasts.fit(fit, contrasts = cm[,1])
fit.1.2 = eBayes(fit.1.2)
pvalue01 = sum(p.adjust(fit.1.2$p.value, "BH") < 0.01)
# 0
pvalue05 = sum(p.adjust(fit.1.2$p.value, "BH") < 0.05)
# 0
setwd("~//documents//GitHub//2022-topic-04-team-03//Tables")
fit.function = function(i){
fit.table = contrasts.fit(fit, contrasts = cm[,i])
fit.table = eBayes(fit.table)
}
setwd("~//documents//GitHub//2022-topic-04-team-03//Tables")
fit.function = function(i){
fit.table = contrasts.fit(fit, contrasts = cm[,i])
fit.table = eBayes(fit.table)
}
fit.1.2 = fit.function(1)
fit.1.4 = fit.function(2)
fit.1.8 = fit.function(3)
fit.1.m = fit.function(4)
fit.1.b = fit.function(5)
fit.2.4 = fit.function(6)
fit.2.8 = fit.function(7)
fit.2.m = fit.function(8)
fit.2.b = fit.function(9)
fit.4.8 = fit.function(10)
fit.4.m = fit.function(11)
fit.4.b = fit.function(12)
fit.8.m = fit.function(13)
fit.8.b = fit.function(14)
fit.m.b = fit.function(15)
#Erstellen Means pro stage pro tissue
n_occur1.8=data.frame(table(annotated.limma.1.8.tra$max.tissue))
tissue.vector1.8=c()
for (i in 1:53) {
tissue.genes=which(annotated.limma.1.8.tra$max.tissue %in% n_occur1.8$Var1[i])
tissue.vector1.8[[i]]= mean(c(annotated.limma.1.8.tra[tissue.genes,2]))
}
n_occur1.m=data.frame(table(annotated.limma.1.m.tra$max.tissue))
tissue.vector1.m=c()
for (i in 1:53) {
tissue.genes=which(annotated.limma.1.m.tra$max.tissue %in% n_occur1.m$Var1[i])
tissue.vector1.m[[i]]= mean(c(annotated.limma.1.m.tra[tissue.genes,2]))
}
n_occur1.b=data.frame(table(annotated.limma.1.b.tra$max.tissue))
tissue.vector1.b=c()
for (i in 1:53) {
tissue.genes=which(annotated.limma.1.b.tra$max.tissue %in% n_occur1.b$Var1[i])
tissue.vector1.b[[i]]= mean(c(annotated.limma.1.b.tra[tissue.genes,2]))
}
#Erstellen Plot Data
tissue.matrix = cbind(tissue.vector1.8,tissue.vector1.m,tissue.vector1.b)
rownames(tissue.matrix) = n_occur1.8$Var1[1:53]
as_tibble(tissue.matrix)
#plot# Fragggeee???
ggplot(tissue.matrix, aes(x = stages, y= tissue.matrix[,1:3], color= row.names(tissue.matrix)) + geom_line() +
geom_point())
ggplot(tissue.matrix, aes(x = stages, y= tissue.matrix[,1:3], color= row.names(tissue.matrix)) + geom_line() +
geom_point())
#Erstellen Means pro stage pro tissue
n_occur1.8=data.frame(table(annotated.limma.1.8.tra$max.tissue))
Δ1.8=c()
for (i in 1:53) {
tissue.genes=which(annotated.limma.1.8.tra$max.tissue %in% n_occur1.8$Var1[i])
Δ1.8[[i]]= mean(c(annotated.limma.1.8.tra[tissue.genes,2]))
}
n_occur1.m=data.frame(table(annotated.limma.1.m.tra$max.tissue))
Δ1.m=c()
for (i in 1:53) {
tissue.genes=which(annotated.limma.1.m.tra$max.tissue %in% n_occur1.m$Var1[i])
Δ1.m[[i]]= mean(c(annotated.limma.1.m.tra[tissue.genes,2]))
}
n_occur1.b=data.frame(table(annotated.limma.1.b.tra$max.tissue))
Δ1.b=c()
for (i in 1:53) {
tissue.genes=which(annotated.limma.1.b.tra$max.tissue %in% n_occur1.b$Var1[i])
Δ1.b[[i]]= mean(c(annotated.limma.1.b.tra[tissue.genes,2]))
}
Δ1.2=c()
Δ1.2[1:53] =0
Δ1.4=c()
Δ1.4[1:53] =0
#Erstellen Plot Data
tissue.matrix = cbind(Δ1.2,Δ1.4,Δ1.8,Δ1.m,Δ1.b)
rownames(tissue.matrix) = n_occur1.8$Var1[1:53]
tissue.matrix= cbind(rownames(tissue.matrix),tissue.matrix)
tissue.matrix= as_tibble(tissue.matrix)
tissue.matrix=pivot_longer(tissue.matrix, cols=Δ1.2:Δ1.b, names_to = "stages" ,values_to="logFc")
#plot
ggplot(tissue.matrix, aes(x = stages, y= as.numeric(logFc),group=as.character(V1)))  + geom_line(aes(color=as.character(V1))) +
geom_point(aes(color=as.character(V1))) + labs(y=("logFC")) + labs(colour = "tissues")
tissue.max.vector = c(rep("Adipose",10),rep("Adrenal Gland",5),rep("Artery",15),rep("Bladder",5),rep("Brain",65),rep("Breast",5),rep("Cells",10),rep("Cervix",10),rep("Colon",10),rep("Esophagus", 15),rep("Follopian Tube",5),rep("Heart",10),rep("Kidney",5),rep("Liver",5),rep("Lung",5),rep("Minor Salivary Gland",5),rep("Muscle",5),rep("Nerve",5),rep("Ovary",5),rep("Pancreas",5),rep("Pituitary",5),rep("Prostate",5),rep("Skin",10),rep("Small Intestine",5), rep("Spleen",5), rep("Stomach",5),rep("Testis",5),rep("Thyroid",5),rep("Uterus",5),rep("Vagina",5),rep("Whole Blood",5))
tissue.fac= cbind(tissue.matrix,tissue.max.vector)
ggplot(tissue.fac, aes(x = stages, y= as.numeric(logFc),group=as.character(V1)))  + geom_line(aes(color=as.character(V1))) +
geom_point(aes(color=as.character(V1))) + labs(y=("logFC")) + labs(colour = "tissues") +facet_wrap(~tissue.max.vector)#+ theme(legend.position = "none")
#uncomment last component to remove legend
view(tissue.fac)
tissue.max.vector = c(rep("Adipose",10),rep("Adrenal Gland",5),rep("Artery",15),rep("Bladder",5),rep("Brain",65),rep("Breast",5),rep("Cells",10),rep("Cervix",10),rep("Colon",10),rep("Esophagus", 15),rep("Follopian Tube",5),rep("Heart",10),rep("Kidney",5),rep("Liver",5),rep("Lung",5),rep("Minor Salivary Gland",5),rep("Muscle",5),rep("Nerve",5),rep("Ovary",5),rep("Pancreas",5),rep("Pituitary",5),rep("Prostate",5),rep("Skin",10),rep("Small Intestine",5), rep("Spleen",5), rep("Stomach",5),rep("Testis",5),rep("Thyroid",5),rep("Uterus",5),rep("Vagina",5),rep("Whole Blood",5))
tissue.fac= cbind(tissue.matrix,tissue.max.vector)
ggplot(tissue.fac, aes(x = stages, y= as.numeric(logFc),group=as.character(V1)))  + geom_line(aes(color=as.character(V1))) +
geom_point(aes(color=as.character(V1))) + labs(y=("logFC")) + labs(colour = "tissues") +facet_wrap(~tissue.max.vector)#+ theme(legend.position = "none")
#uncomment last component to remove legend
tissue.max.vector = c(rep("Adipose",10),rep("Adrenal Gland",5),rep("Artery",15),rep("Bladder",5),rep("Brain",65),rep("Breast",5),rep("Cells",10),rep("Cervix",10),rep("Colon",10),rep("Esophagus", 15),rep("Follopian Tube",5),rep("Heart",10),rep("Kidney",5),rep("Liver",5),rep("Lung",5),rep("Minor Salivary Gland",5),rep("Muscle",5),rep("Nerve",5),rep("Ovary",5),rep("Pancreas",5),rep("Pituitary",5),rep("Prostate",5),rep("Skin",10),rep("Small Intestine",5), rep("Spleen",5), rep("Stomach",5),rep("Testis",5),rep("Thyroid",5),rep("Uterus",5),rep("Vagina",5),rep("Whole Blood",5))
tissue.fac= cbind(tissue.matrix,tissue.max.vector)
plot.tissue.fac=ggplot(tissue.fac, aes(x = stages, y= as.numeric(logFc),group=as.character(V1)))  + geom_line(aes(color=as.character(V1))) +
geom_point(aes(color=as.character(V1))) + labs(y=("logFC")) + labs(colour = "tissues") +facet_wrap(~tissue.max.vector)#+ theme(legend.position = "none")
#uncomment last component to remove legend
view(plot.tissue.fac)
plot(p1)
tissue.max.vector = c(rep("Adipose",10),rep("Adrenal Gland",5),rep("Artery",15),rep("Bladder",5),rep("Brain",65),rep("Breast",5),rep("Cells",10),rep("Cervix",10),rep("Colon",10),rep("Esophagus", 15),rep("Follopian Tube",5),rep("Heart",10),rep("Kidney",5),rep("Liver",5),rep("Lung",5),rep("Minor Salivary Gland",5),rep("Muscle",5),rep("Nerve",5),rep("Ovary",5),rep("Pancreas",5),rep("Pituitary",5),rep("Prostate",5),rep("Skin",10),rep("Small Intestine",5), rep("Spleen",5), rep("Stomach",5),rep("Testis",5),rep("Thyroid",5),rep("Uterus",5),rep("Vagina",5),rep("Whole Blood",5))
tissue.fac= cbind(tissue.matrix,tissue.max.vector)
plot.tissue.fac <- ggplot(tissue.fac, aes(x = stages, y= as.numeric(logFc),group=as.character(V1)))  + geom_line(aes(color=as.character(V1))) +
geom_point(aes(color=as.character(V1))) + labs(y=("logFC")) + labs(colour = "tissues") +facet_wrap(~tissue.max.vector)#+ theme(legend.position = "none")
#uncomment last component to remove legend
plot(plot.tissue.fac)
