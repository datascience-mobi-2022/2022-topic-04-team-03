# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
intersect(x[[1]], x[[2]])
} else if (length(x) > 2){
intersect(x[[1]], Intersect(x[-1]))
}
}
intersect.tra.genes.up = Intersect(list_venn.up)
# 3 genes are continuously up-regulated from 1-cell stage to blastocyst stage
# Names of the three up-regulated genes
Venn.genes.up = annotated.tra[rownames(annotated.tra) %in% intersect.tra.genes.up,]
# creating demo data for Venn diagram
#1.8.tra Up-regulated
tra.1.8.up = annotated.limma.1.8.tra[which(annotated.limma.1.8.tra$logFC>0),]$ensembl.transcript
#8.m.tra Up-regulated
tra.8.m.up = annotated.limma.8.m.tra[which(annotated.limma.8.m.tra$logFC>0),]$ensembl.transcript
#m.b.tra Up-regulated
tra.m.b.up = annotated.limma.m.b.tra[which(annotated.limma.m.b.tra$logFC>0),]$ensembl.transcript
list_venn.up = list(A = tra.1.8.up,B=tra.8.m.up,C=tra.m.b.up)
# Helper function to display Venn diagram.up
display_venn.up = function(x){
grid.newpage()
venn_object = venn.diagram(x, main=("Up-regulated TRAs between different stages"), main.fontface = "bold", main.cex = 1.5, category.names=c("1- and 8-cell stage"," 8- and morula stage","morula and blastocyst stage"), fill = c("#009E73","#E69F00", "#56B4E9"), filename= NULL, cat.cex=1.2, cat.fontface="bold",cat.just=list(c(0.7,1) , c(0.5,0.5) , c(0.5,0)),lwd=2,lty=1,cex=1.5)
grid.draw(venn_object)
}
# Create Venn diagramm for up-regulated genes
display_venn.up(list_venn.up)
#create a function to give the name of the genes in the intersection of three stages
Intersect  =  function (x) {
# Multiple set version of intersect
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
intersect(x[[1]], x[[2]])
} else if (length(x) > 2){
intersect(x[[1]], Intersect(x[-1]))
}
}
intersect.tra.genes.up = Intersect(list_venn.up)
# 3 genes are continuously up-regulated from 1-cell stage to blastocyst stage
# Names of the three up-regulated genes
Venn.genes.up = annotated.tra[rownames(annotated.tra) %in% intersect.tra.genes.up,]
# creating demo data for Venn diagram
#1.8.tra Up-regulated
tra.1.8.up = annotated.limma.1.8.tra[which(annotated.limma.1.8.tra$logFC>0),]$ensembl.transcript
#8.m.tra Up-regulated
tra.8.m.up = annotated.limma.8.m.tra[which(annotated.limma.8.m.tra$logFC>0),]$ensembl.transcript
#m.b.tra Up-regulated
tra.m.b.up = annotated.limma.m.b.tra[which(annotated.limma.m.b.tra$logFC>0),]$ensembl.transcript
list_venn.up = list(A = tra.1.8.up,B=tra.8.m.up,C=tra.m.b.up)
# Helper function to display Venn diagram.up
display_venn.up = function(x){
grid.newpage()
venn_object = venn.diagram(x, main=("Up-regulated TRAs between different stages"), main.fontface = "bold", main.cex = 1.5, category.names=c("1- and 8-cell stage"," 8- and morula stage","morula and blastocyst stage"), fill = c("#009E73","#E69F00", "#56B4E9"), filename= NULL, cat.cex=1, cat.fontface="bold",cat.just=list(c(0.7,1) , c(0.5,0.5) , c(0.5,0)),lwd=2,lty=1,cex=1.5)
grid.draw(venn_object)
}
# Create Venn diagramm for up-regulated genes
display_venn.up(list_venn.up)
#create a function to give the name of the genes in the intersection of three stages
Intersect  =  function (x) {
# Multiple set version of intersect
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
intersect(x[[1]], x[[2]])
} else if (length(x) > 2){
intersect(x[[1]], Intersect(x[-1]))
}
}
intersect.tra.genes.up = Intersect(list_venn.up)
# 3 genes are continuously up-regulated from 1-cell stage to blastocyst stage
# Names of the three up-regulated genes
Venn.genes.up = annotated.tra[rownames(annotated.tra) %in% intersect.tra.genes.up,]
# creating demo data for Venn diagram
#1.8.tra Up-regulated
tra.1.8.up = annotated.limma.1.8.tra[which(annotated.limma.1.8.tra$logFC>0),]$ensembl.transcript
#8.m.tra Up-regulated
tra.8.m.up = annotated.limma.8.m.tra[which(annotated.limma.8.m.tra$logFC>0),]$ensembl.transcript
#m.b.tra Up-regulated
tra.m.b.up = annotated.limma.m.b.tra[which(annotated.limma.m.b.tra$logFC>0),]$ensembl.transcript
list_venn.up = list(A = tra.1.8.up,B=tra.8.m.up,C=tra.m.b.up)
# Helper function to display Venn diagram.up
display_venn.up = function(x){
grid.newpage()
venn_object = venn.diagram(x, main=("Up-regulated TRAs between different stages"), main.fontface = "bold", main.cex = 1.5, category.names=c("1- and 8-cell stage"," 8- and morula stage","morula and blastocyst stage"), fill = c("#009E73","#E69F00", "#56B4E9"), filename= NULL, cat.cex=0.8, cat.fontface="bold",cat.just=list(c(0.7,1) , c(0.5,0.5) , c(0.5,0)),lwd=2,lty=1,cex=1.5)
grid.draw(venn_object)
}
# Create Venn diagramm for up-regulated genes
display_venn.up(list_venn.up)
#create a function to give the name of the genes in the intersection of three stages
Intersect  =  function (x) {
# Multiple set version of intersect
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
intersect(x[[1]], x[[2]])
} else if (length(x) > 2){
intersect(x[[1]], Intersect(x[-1]))
}
}
intersect.tra.genes.up = Intersect(list_venn.up)
# 3 genes are continuously up-regulated from 1-cell stage to blastocyst stage
# Names of the three up-regulated genes
Venn.genes.up = annotated.tra[rownames(annotated.tra) %in% intersect.tra.genes.up,]
# creating demo data for Venn diagram
#1.8.tra Up-regulated
tra.1.8.up = annotated.limma.1.8.tra[which(annotated.limma.1.8.tra$logFC>0),]$ensembl.transcript
#8.m.tra Up-regulated
tra.8.m.up = annotated.limma.8.m.tra[which(annotated.limma.8.m.tra$logFC>0),]$ensembl.transcript
#m.b.tra Up-regulated
tra.m.b.up = annotated.limma.m.b.tra[which(annotated.limma.m.b.tra$logFC>0),]$ensembl.transcript
list_venn.up = list(A = tra.1.8.up,B=tra.8.m.up,C=tra.m.b.up)
# Helper function to display Venn diagram.up
display_venn.up = function(x){
grid.newpage()
venn_object = venn.diagram(x, main=("Up-regulated TRAs between different stages"), main.fontface = "bold", main.cex = 1.5, category.names=c("1- and 8-cell stage"," 8- and morula stage","morula and blastocyst stage"), fill = c("#009E73","#E69F00", "#56B4E9"), filename= NULL, cat.cex=1, cat.fontface="bold",cat.just=list(c(0.7,1) , c(0.5,0.5) , c(0.5,0)),lwd=2,lty=1,cex=1.5)
grid.draw(venn_object)
}
# Create Venn diagramm for up-regulated genes
display_venn.up(list_venn.up)
#create a function to give the name of the genes in the intersection of three stages
Intersect  =  function (x) {
# Multiple set version of intersect
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
intersect(x[[1]], x[[2]])
} else if (length(x) > 2){
intersect(x[[1]], Intersect(x[-1]))
}
}
intersect.tra.genes.up = Intersect(list_venn.up)
# 3 genes are continuously up-regulated from 1-cell stage to blastocyst stage
# Names of the three up-regulated genes
Venn.genes.up = annotated.tra[rownames(annotated.tra) %in% intersect.tra.genes.up,]
# creating demo data for Venn diagram
#1.8.tra Up-regulated
tra.1.8.up = annotated.limma.1.8.tra[which(annotated.limma.1.8.tra$logFC>0),]$ensembl.transcript
#8.m.tra Up-regulated
tra.8.m.up = annotated.limma.8.m.tra[which(annotated.limma.8.m.tra$logFC>0),]$ensembl.transcript
#m.b.tra Up-regulated
tra.m.b.up = annotated.limma.m.b.tra[which(annotated.limma.m.b.tra$logFC>0),]$ensembl.transcript
list_venn.up = list(A = tra.1.8.up,B=tra.8.m.up,C=tra.m.b.up)
# Helper function to display Venn diagram.up
display_venn.up = function(x){
grid.newpage()
venn_object = venn.diagram(x, main=("Up-regulated TRAs between different stages"), main.fontface = "bold", main.cex = 1.5, category.names=c("1- and 8-cell stage"," 8- and morula stage","morula and blastocyst stage"), fill = c("#009E73","#E69F00", "#56B4E9"), filename= NULL, cat.cex=1, cat.fontface="bold",cat.just=list(c(-0.5,3) , c(0.5,0.5) , c(0.5,0)),lwd=2,lty=1,cex=1.5)
grid.draw(venn_object)
}
# Create Venn diagramm for up-regulated genes
display_venn.up(list_venn.up)
#create a function to give the name of the genes in the intersection of three stages
Intersect  =  function (x) {
# Multiple set version of intersect
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
intersect(x[[1]], x[[2]])
} else if (length(x) > 2){
intersect(x[[1]], Intersect(x[-1]))
}
}
intersect.tra.genes.up = Intersect(list_venn.up)
# 3 genes are continuously up-regulated from 1-cell stage to blastocyst stage
# Names of the three up-regulated genes
Venn.genes.up = annotated.tra[rownames(annotated.tra) %in% intersect.tra.genes.up,]
# creating demo data for Venn diagram
#1.8.tra Up-regulated
tra.1.8.up = annotated.limma.1.8.tra[which(annotated.limma.1.8.tra$logFC>0),]$ensembl.transcript
#8.m.tra Up-regulated
tra.8.m.up = annotated.limma.8.m.tra[which(annotated.limma.8.m.tra$logFC>0),]$ensembl.transcript
#m.b.tra Up-regulated
tra.m.b.up = annotated.limma.m.b.tra[which(annotated.limma.m.b.tra$logFC>0),]$ensembl.transcript
list_venn.up = list(A = tra.1.8.up,B=tra.8.m.up,C=tra.m.b.up)
# Helper function to display Venn diagram.up
display_venn.up = function(x){
grid.newpage()
venn_object = venn.diagram(x, main=("Up-regulated TRAs between different stages"), main.fontface = "bold", main.cex = 1.5, category.names=c("1- and 8-cell stage"," 8- and morula stage","morula and blastocyst stage"), fill = c("#009E73","#E69F00", "#56B4E9"), filename= NULL, cat.cex=1, cat.fontface="bold",cat.just=list(c(-0.5,3) , c(2,3) , c(0.5,0)),lwd=2,lty=1,cex=1.5)
grid.draw(venn_object)
}
# Create Venn diagramm for up-regulated genes
display_venn.up(list_venn.up)
#create a function to give the name of the genes in the intersection of three stages
Intersect  =  function (x) {
# Multiple set version of intersect
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
intersect(x[[1]], x[[2]])
} else if (length(x) > 2){
intersect(x[[1]], Intersect(x[-1]))
}
}
intersect.tra.genes.up = Intersect(list_venn.up)
# 3 genes are continuously up-regulated from 1-cell stage to blastocyst stage
# Names of the three up-regulated genes
Venn.genes.up = annotated.tra[rownames(annotated.tra) %in% intersect.tra.genes.up,]
# creating demo data for Venn diagram
#1.8.tra Up-regulated
tra.1.8.up = annotated.limma.1.8.tra[which(annotated.limma.1.8.tra$logFC>0),]$ensembl.transcript
#8.m.tra Up-regulated
tra.8.m.up = annotated.limma.8.m.tra[which(annotated.limma.8.m.tra$logFC>0),]$ensembl.transcript
#m.b.tra Up-regulated
tra.m.b.up = annotated.limma.m.b.tra[which(annotated.limma.m.b.tra$logFC>0),]$ensembl.transcript
list_venn.up = list(A = tra.1.8.up,B=tra.8.m.up,C=tra.m.b.up)
# Helper function to display Venn diagram.up
display_venn.up = function(x){
grid.newpage()
venn_object = venn.diagram(x, main=("Up-regulated TRAs between different stages"), main.fontface = "bold", main.cex = 1.5, category.names=c("1- and 8-cell stage"," 8- and morula stage","morula and blastocyst stage"), fill = c("#009E73","#E69F00", "#56B4E9"), filename= NULL, cat.cex=1, cat.fontface="bold",cat.just=list(c(-0.5,3) , c(1.5,3) , c(0.5,0)),lwd=2,lty=1,cex=1.5)
grid.draw(venn_object)
}
# Create Venn diagramm for up-regulated genes
display_venn.up(list_venn.up)
#create a function to give the name of the genes in the intersection of three stages
Intersect  =  function (x) {
# Multiple set version of intersect
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
intersect(x[[1]], x[[2]])
} else if (length(x) > 2){
intersect(x[[1]], Intersect(x[-1]))
}
}
intersect.tra.genes.up = Intersect(list_venn.up)
# 3 genes are continuously up-regulated from 1-cell stage to blastocyst stage
# Names of the three up-regulated genes
Venn.genes.up = annotated.tra[rownames(annotated.tra) %in% intersect.tra.genes.up,]
# creating demo data for Venn diagram
#1.8.tra Up-regulated
tra.1.8.up = annotated.limma.1.8.tra[which(annotated.limma.1.8.tra$logFC>0),]$ensembl.transcript
#8.m.tra Up-regulated
tra.8.m.up = annotated.limma.8.m.tra[which(annotated.limma.8.m.tra$logFC>0),]$ensembl.transcript
#m.b.tra Up-regulated
tra.m.b.up = annotated.limma.m.b.tra[which(annotated.limma.m.b.tra$logFC>0),]$ensembl.transcript
list_venn.up = list(A = tra.1.8.up,B=tra.8.m.up,C=tra.m.b.up)
# Helper function to display Venn diagram.up
display_venn.up = function(x){
grid.newpage()
venn_object = venn.diagram(x, main=("Up-regulated TRAs between different stages"), main.fontface = "bold", main.cex = 1.5, category.names=c("1- and 8-cell stage"," 8- and morula stage","morula and blastocyst stage"), fill = c("#009E73","#E69F00", "#56B4E9"), filename= NULL, cat.cex=1, cat.fontface="bold",cat.just=list(c(-0.5,3) , c(1.3,3) , c(0.5,0)),lwd=2,lty=1,cex=1.5)
grid.draw(venn_object)
}
# Create Venn diagramm for up-regulated genes
display_venn.up(list_venn.up)
#create a function to give the name of the genes in the intersection of three stages
Intersect  =  function (x) {
# Multiple set version of intersect
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
intersect(x[[1]], x[[2]])
} else if (length(x) > 2){
intersect(x[[1]], Intersect(x[-1]))
}
}
intersect.tra.genes.up = Intersect(list_venn.up)
# 3 genes are continuously up-regulated from 1-cell stage to blastocyst stage
# Names of the three up-regulated genes
Venn.genes.up = annotated.tra[rownames(annotated.tra) %in% intersect.tra.genes.up,]
# creating demo data for Venn diagram
#1.8.tra Up-regulated
tra.1.8.up = annotated.limma.1.8.tra[which(annotated.limma.1.8.tra$logFC>0),]$ensembl.transcript
#8.m.tra Up-regulated
tra.8.m.up = annotated.limma.8.m.tra[which(annotated.limma.8.m.tra$logFC>0),]$ensembl.transcript
#m.b.tra Up-regulated
tra.m.b.up = annotated.limma.m.b.tra[which(annotated.limma.m.b.tra$logFC>0),]$ensembl.transcript
list_venn.up = list(A = tra.1.8.up,B=tra.8.m.up,C=tra.m.b.up)
# Helper function to display Venn diagram.up
display_venn.up = function(x){
grid.newpage()
venn_object = venn.diagram(x, main=("Up-regulated TRAs between different stages"), main.fontface = "bold", main.cex = 1.5, category.names=c("1- and 8-cell stage"," 8- and morula stage","morula and blastocyst stage"), fill = c("#009E73","#E69F00", "#56B4E9"), filename= NULL, cat.cex=1, cat.fontface="bold",cat.just=list(c(-0.5,3) , c(1.4,3) , c(0.5,0)),lwd=2,lty=1,cex=1.5)
grid.draw(venn_object)
}
# Create Venn diagramm for up-regulated genes
display_venn.up(list_venn.up)
#create a function to give the name of the genes in the intersection of three stages
Intersect  =  function (x) {
# Multiple set version of intersect
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
intersect(x[[1]], x[[2]])
} else if (length(x) > 2){
intersect(x[[1]], Intersect(x[-1]))
}
}
intersect.tra.genes.up = Intersect(list_venn.up)
# 3 genes are continuously up-regulated from 1-cell stage to blastocyst stage
# Names of the three up-regulated genes
Venn.genes.up = annotated.tra[rownames(annotated.tra) %in% intersect.tra.genes.up,]
# creating demo data for Venn diagram
#1.8.tra Up-regulated
tra.1.8.up = annotated.limma.1.8.tra[which(annotated.limma.1.8.tra$logFC>0),]$ensembl.transcript
#8.m.tra Up-regulated
tra.8.m.up = annotated.limma.8.m.tra[which(annotated.limma.8.m.tra$logFC>0),]$ensembl.transcript
#m.b.tra Up-regulated
tra.m.b.up = annotated.limma.m.b.tra[which(annotated.limma.m.b.tra$logFC>0),]$ensembl.transcript
list_venn.up = list(A = tra.1.8.up,B=tra.8.m.up,C=tra.m.b.up)
# Helper function to display Venn diagram.up
display_venn.up = function(x){
grid.newpage()
venn_object = venn.diagram(x, main=("Up-regulated TRAs between different stages"), main.fontface = "bold", main.cex = 1.5, category.names=c("1- and 8-cell stage"," 8- and morula stage","morula and blastocyst stage"), fill = c("#009E73","#E69F00", "#56B4E9"), filename= NULL, cat.cex=1, cat.fontface="bold",cat.just=list(c(-0.5,3) , c(1.4,3) , c(0.5,-3)),lwd=2,lty=1,cex=1.5)
grid.draw(venn_object)
}
# Create Venn diagramm for up-regulated genes
display_venn.up(list_venn.up)
#create a function to give the name of the genes in the intersection of three stages
Intersect  =  function (x) {
# Multiple set version of intersect
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
intersect(x[[1]], x[[2]])
} else if (length(x) > 2){
intersect(x[[1]], Intersect(x[-1]))
}
}
intersect.tra.genes.up = Intersect(list_venn.up)
# 3 genes are continuously up-regulated from 1-cell stage to blastocyst stage
# Names of the three up-regulated genes
Venn.genes.up = annotated.tra[rownames(annotated.tra) %in% intersect.tra.genes.up,]
# creating demo data for Venn diagram
#1.8.tra Up-regulated
tra.1.8.up = annotated.limma.1.8.tra[which(annotated.limma.1.8.tra$logFC>0),]$ensembl.transcript
#8.m.tra Up-regulated
tra.8.m.up = annotated.limma.8.m.tra[which(annotated.limma.8.m.tra$logFC>0),]$ensembl.transcript
#m.b.tra Up-regulated
tra.m.b.up = annotated.limma.m.b.tra[which(annotated.limma.m.b.tra$logFC>0),]$ensembl.transcript
list_venn.up = list(A = tra.1.8.up,B=tra.8.m.up,C=tra.m.b.up)
# Helper function to display Venn diagram.up
display_venn.up = function(x){
grid.newpage()
venn_object = venn.diagram(x, main=("Up-regulated TRAs between different stages"), main.fontface = "bold", main.cex = 1.5, category.names=c("1- and 8-cell stage"," 8- and morula stage","morula and blastocyst stage"), fill = c("#009E73","#E69F00", "#56B4E9"), filename= NULL, cat.cex=1, cat.fontface="bold",cat.just=list(c(-0.5,3) , c(1.4,3) , c(0.5,-4)),lwd=2,lty=1,cex=1.5)
grid.draw(venn_object)
}
# Create Venn diagramm for up-regulated genes
display_venn.up(list_venn.up)
#create a function to give the name of the genes in the intersection of three stages
Intersect  =  function (x) {
# Multiple set version of intersect
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
intersect(x[[1]], x[[2]])
} else if (length(x) > 2){
intersect(x[[1]], Intersect(x[-1]))
}
}
intersect.tra.genes.up = Intersect(list_venn.up)
# 3 genes are continuously up-regulated from 1-cell stage to blastocyst stage
# Names of the three up-regulated genes
Venn.genes.up = annotated.tra[rownames(annotated.tra) %in% intersect.tra.genes.up,]
# creating demo data for Venn diagram
#1.8.tra Up-regulated
tra.1.8.up = annotated.limma.1.8.tra[which(annotated.limma.1.8.tra$logFC>0),]$ensembl.transcript
#8.m.tra Up-regulated
tra.8.m.up = annotated.limma.8.m.tra[which(annotated.limma.8.m.tra$logFC>0),]$ensembl.transcript
#m.b.tra Up-regulated
tra.m.b.up = annotated.limma.m.b.tra[which(annotated.limma.m.b.tra$logFC>0),]$ensembl.transcript
list_venn.up = list(A = tra.1.8.up,B=tra.8.m.up,C=tra.m.b.up)
# Helper function to display Venn diagram.up
display_venn.up = function(x){
grid.newpage()
venn_object = venn.diagram(x, main=("Up-regulated TRAs between different stages"), main.fontface = "bold", main.cex = 1.5, category.names=c("1- and 8-cell stage"," 8- and morula stage","morula and blastocyst stage"), fill = c("#009E73","#E69F00", "#56B4E9"), filename= NULL, cat.cex=1, cat.fontface="bold",cat.just=list(c(-0.5,3) , c(1.4,3) , c(0.5,-5)),lwd=2,lty=1,cex=1.5)
grid.draw(venn_object)
}
# Create Venn diagramm for up-regulated genes
display_venn.up(list_venn.up)
#create a function to give the name of the genes in the intersection of three stages
Intersect  =  function (x) {
# Multiple set version of intersect
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
intersect(x[[1]], x[[2]])
} else if (length(x) > 2){
intersect(x[[1]], Intersect(x[-1]))
}
}
intersect.tra.genes.up = Intersect(list_venn.up)
# 3 genes are continuously up-regulated from 1-cell stage to blastocyst stage
# Names of the three up-regulated genes
Venn.genes.up = annotated.tra[rownames(annotated.tra) %in% intersect.tra.genes.up,]
# creating demo data for Venn diagram
#1.8.tra Up-regulated
tra.1.8.up = annotated.limma.1.8.tra[which(annotated.limma.1.8.tra$logFC>0),]$ensembl.transcript
#8.m.tra Up-regulated
tra.8.m.up = annotated.limma.8.m.tra[which(annotated.limma.8.m.tra$logFC>0),]$ensembl.transcript
#m.b.tra Up-regulated
tra.m.b.up = annotated.limma.m.b.tra[which(annotated.limma.m.b.tra$logFC>0),]$ensembl.transcript
list_venn.up = list(A = tra.1.8.up,B=tra.8.m.up,C=tra.m.b.up)
# Helper function to display Venn diagram.up
display_venn.up = function(x){
grid.newpage()
venn_object = venn.diagram(x, main=("Up-regulated TRAs between different stages"), main.fontface = "bold", main.cex = 1.5, category.names=c("1- and 8-cell stage"," 8- and morula stage","morula and blastocyst stage"), fill = c("#009E73","#E69F00", "#56B4E9"), filename= NULL, cat.cex=1, cat.fontface="bold",cat.just=list(c(-0.5,3) , c(1.4,3) , c(0.5,-6)),lwd=2,lty=1,cex=1.5)
grid.draw(venn_object)
}
# Create Venn diagramm for up-regulated genes
display_venn.up(list_venn.up)
#create a function to give the name of the genes in the intersection of three stages
Intersect  =  function (x) {
# Multiple set version of intersect
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
intersect(x[[1]], x[[2]])
} else if (length(x) > 2){
intersect(x[[1]], Intersect(x[-1]))
}
}
intersect.tra.genes.up = Intersect(list_venn.up)
# 3 genes are continuously up-regulated from 1-cell stage to blastocyst stage
# Names of the three up-regulated genes
Venn.genes.up = annotated.tra[rownames(annotated.tra) %in% intersect.tra.genes.up,]
# creating demo data for Venn diagram
#1.8.tra Up-regulated
tra.1.8.up = annotated.limma.1.8.tra[which(annotated.limma.1.8.tra$logFC>0),]$ensembl.transcript
#8.m.tra Up-regulated
tra.8.m.up = annotated.limma.8.m.tra[which(annotated.limma.8.m.tra$logFC>0),]$ensembl.transcript
#m.b.tra Up-regulated
tra.m.b.up = annotated.limma.m.b.tra[which(annotated.limma.m.b.tra$logFC>0),]$ensembl.transcript
list_venn.up = list(A = tra.1.8.up,B=tra.8.m.up,C=tra.m.b.up)
# Helper function to display Venn diagram.up
display_venn.up = function(x){
grid.newpage()
venn_object = venn.diagram(x, main=("Up-regulated TRAs between different stages"), main.fontface = "bold", main.cex = 1.5, category.names=c("1- and 8-cell stage"," 8- and morula stage","morula and blastocyst stage"), fill = c("#009E73","#E69F00", "#56B4E9"), filename= NULL, cat.cex=1, cat.fontface="bold",cat.just=list(c(-0.5,3) , c(1.4,3) , c(0.5,-6)),lwd=2,lty=1,cex=1.5)
grid.draw(venn_object)
}
# Create Venn diagramm for up-regulated genes
display_venn.up(list_venn.up)
#create a function to give the name of the genes in the intersection of three stages
Intersect  =  function (x) {
# Multiple set version of intersect
# x is a list
if (length(x) == 1) {
unlist(x)
} else if (length(x) == 2) {
intersect(x[[1]], x[[2]])
} else if (length(x) > 2){
intersect(x[[1]], Intersect(x[-1]))
}
}
intersect.tra.genes.up = Intersect(list_venn.up)
# 3 genes are continuously up-regulated from 1-cell stage to blastocyst stage
# Names of the three up-regulated genes
Venn.genes.up = annotated.tra[rownames(annotated.tra) %in% intersect.tra.genes.up,]
install.packages("imager")
install.packages("magick")
knitr::opts_chunk$set(include = FALSE, echo = FALSE, fig.align = "centre", message = FALSE,warning = FALSE, cache = TRUE)
knitr::opts_knit$set(root.dir = "~//Documents//GitHub//2022-topic-04-team-03")
color1 = c(rep("red",3),rep("orange",3),rep("yellow",3),rep("green",3),rep("blue",3),rep("purple",3))
par(mar=c(5, 4, 4, 10), xpd=TRUE)
plot(pca$x[,1], pca$x[,2],col=color1, pch=19,xlab="PC1",ylab="PC2",main="Principal component analysis")
color2 = c("red","orange","yellow","green","blue","purple")
legend(x = 170,y=130,legend = c("1-cell stage", "2-cell stage","4-cell stage", "8-cell stage", "Morula stage","Blastocyst stage"), fill= color2,col = color2)
# show how much variance each PC explains
variance = (pca$sdev)^2
prop.variance = variance/sum(variance)
# Plot cumulative proportion of variance explained
plot(cumsum(prop.variance), xlab = "Principal component",
ylab = "Cumulative proportion of variance explained",cex.lab=0.7,
ylim = c(0, 1), type = "b")
abline(h=0.9)
# 4 PCs are enough to show more than 90%
color1 = c(rep("red",3),rep("orange",3),rep("yellow",3),rep("green",3),rep("blue",3),rep("purple",3))
par(mar=c(5, 4, 4, 10), xpd=TRUE)
plot(pca$x[,1], pca$x[,2],col=color1, pch=19,xlab="PC1",ylab="PC2",main="Principal component analysis")
color2 = c("red","orange","yellow","green","blue","purple")
legend(x = 170,y=130,legend = c("1-cell stage", "2-cell stage","4-cell stage", "8-cell stage", "Morula stage","Blastocyst stage"), fill= color2,col = color2)
color1 = c(rep("red",3),rep("orange",3),rep("yellow",3),rep("green",3),rep("blue",3),rep("purple",3))
par(mar=c(5, 4, 4, 10), xpd=TRUE)
plot(pca$x[,1], pca$x[,2],col=color1, pch=19,xlab="PC1",ylab="PC2",main="Principal component analysis")
color2 = c("red","orange","yellow","green","blue","purple")
legend(x = 170,y=130,legend = c("1-cell stage", "2-cell stage","4-cell stage", "8-cell stage", "Morula stage","Blastocyst stage"), fill= color2,col = color2)
# conducting PCA
topVar = apply(human.vsnrma.df2, 1, var)
q75 = quantile(topVar, probs = 0.75)
i.topvar = which(topVar >= q75)
human.vsnrma.df2.topVar = human.vsnrma.df2[i.topvar,]
pca = prcomp(t(human.vsnrma.df2.topVar), center = T, scale. = T)
color1 = c(rep("red",3),rep("orange",3),rep("yellow",3),rep("green",3),rep("blue",3),rep("purple",3))
par(mar=c(5, 4, 4, 10), xpd=TRUE)
plot(pca$x[,1], pca$x[,2],col=color1, pch=19,xlab="PC1",ylab="PC2",main="Principal component analysis")
color2 = c("red","orange","yellow","green","blue","purple")
legend(x = 170,y=130,legend = c("1-cell stage", "2-cell stage","4-cell stage", "8-cell stage", "Morula stage","Blastocyst stage"), fill= color2,col = color2)
color1 = c(rep("red",3),rep("orange",3),rep("yellow",3),rep("green",3),rep("blue",3),rep("purple",3))
par(mar=c(5, 4, 4, 10), xpd=TRUE)
plot(pca$x[,1], pca$x[,2],col=color1, pch=19,xlab="PC1",ylab="PC2",main="Principal component analysis")
color2 = c("red","orange","yellow","green","blue","purple")
legend(x = 170,y=130,legend = c("1-cell stage", "2-cell stage","4-cell stage", "8-cell stage", "Morula stage","Blastocyst stage"), fill= color2,col = color2)
dev.off()
color1 = c(rep("red",3),rep("orange",3),rep("yellow",3),rep("green",3),rep("blue",3),rep("purple",3))
par(mar=c(5, 4, 4, 10), xpd=TRUE)
plot(pca$x[,1], pca$x[,2],col=color1, pch=19,xlab="PC1",ylab="PC2",main="Principal component analysis")
color2 = c("red","orange","yellow","green","blue","purple")
legend(x = 170,y=130,legend = c("1-cell stage", "2-cell stage","4-cell stage", "8-cell stage", "Morula stage","Blastocyst stage"), fill= color2,col = color2)
dev.off()
