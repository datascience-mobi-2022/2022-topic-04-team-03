knitr::opts_chunk$set(include=FALSE, echo = FALSE, fig.align = 'centre', message=FALSE, cache = TRUE)
knitr::opts_knit$set(root.dir = "~//Documents//GitHub//2022-topic-04-team-03")
knitr::opts_chunk$set(include=FALSE, echo = FALSE, fig.align = 'centre', message=FALSE,warning = FALSE, cache = TRUE)
knitr::opts_knit$set(root.dir = "~//Documents//GitHub//2022-topic-04-team-03")
projectPath <- dirname(rstudioapi::getSourceEditorContext()$path)
#load library
library(affy)
library(vsn)
library(AnnotationDbi)
library(hgu133plus2hsenstcdf)
library(hgu133plus2hsenstprobe)
library(limma)
library(pheatmap)
library(dplyr)
library(tidyverse)
library(hexbin)
library(cluster)
library(factoextra)
library(EnhancedVolcano)
library(org.Hs.eg.db)
library(RColorBrewer)
library(VennDiagram)
library(GO.db)
library(tinytex)
library(clusterProfiler)
library(enrichplot)
library(ggplot2)
# setting working directory and loading
setwd("~//Documents//GitHub//2022-topic-04-team-03//Data//rawData")
setwd("~/GitHub/2022-topic-04-team-03/Data/rawData")
ata.human=ReadAffy()
data.human@cdfName <- "HGU133Plus2_Hs_ENST"
data.human=ReadAffy()
data.human@cdfName <- "HGU133Plus2_Hs_ENST"
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/2022-topic-04-team-03/Data/rawData")
data.human=ReadAffy()
data.human@cdfName <- "HGU133Plus2_Hs_ENST"
#load library
library(affy)
library(vsn)
library(AnnotationDbi)
library(hgu133plus2hsenstcdf)
library(hgu133plus2hsenstprobe)
library(limma)
library(pheatmap)
library(dplyr)
library(tidyverse)
library(hexbin)
library(cluster)
library(factoextra)
library(EnhancedVolcano)
library(org.Hs.eg.db)
library(RColorBrewer)
library(VennDiagram)
library(GO.db)
library(tinytex)
#library(clusterProfiler)
#library(enrichplot)
library(ggplot2)
image(data.human[,3], col = rainbow (100, start = 0, end = 0.75)[100:1],main=substr(colnames(data.human)[3],1,9))
human.vsnrma <- vsnrma(data.human)
human.vsnrma <- vsnrma(data.human)
colnames(human.vsnrma)= substr(colnames(human.vsnrma), 1,9)
expression.data <- exprs(human.vsnrma)
# Create a data frame out of the expression data from the normalized data
human.vsnrma.df = data.frame(exprs(human.vsnrma))
# Are there any NAs in our dataset?
sum(apply(human.vsnrma.df,1,function(x){sum(is.na(x))}))
#> No
setwd("~/GitHub/2022-topic-04-team-03/Tables")
ensembl.data <- read.csv("ensembl.human.txt")
dim(ensembl.data)
##268341      9
ensembl.genes = ensembl.data[,1]
ensembl.transcripts = ensembl.data[,3]
ensembl.chromosome = ensembl.data[,7]
ensembl.symbols = ensembl.data[,9]
#rename the colnames to the stages
names = c("1 cell stage, rep 1", "1 cell stage, rep 2", "1 cell stage, rep 3",
"2 cell stage, rep 1", "2 cell stage, rep 2", "2 cell stage, rep 3",
"4 cell stage, rep 1", "4 cell stage, rep 2", "4 cell stage, rep 3",
"8 cell stage, rep 1", "8 cell stage, rep 2", "8 cell stage, rep 3",
"morula stage, rep 1", "morula stage, rep 2", "morula stage, rep 3",
"blastocyst stage, rep 1", "blastocyst stage, rep 2", "blastocyst stage, rep 3")
colnames(human.vsnrma.df) = names
# Check dimensions
dim(human.vsnrma.df)
#95,721    18
# exclude Affymetrix control genes which begin with "AFFX"
human.vsnrma.df2 = human.vsnrma.df[63:95721,]
dim(human.vsnrma.df2)
# 95,659    18
# remove ".xx_at" suffix
rownames(human.vsnrma.df2) = substr(rownames(human.vsnrma.df2), 1,15)
tra.data <- read.table("tra.2017.human.gtex.5x.table.tsv",header=TRUE)
j = which(rownames(human.vsnrma.df2) %in% tra.data$ensembl.transcript)
tra.extracted = rownames(human.vsnrma.df2)[j] #24,783
human.vsnrma.only.tra = human.vsnrma.df2[j,]
dim(human.vsnrma.only.tra)
#24783 18
#exclude TRAs which are not expressed in our dataset
k = which(tra.data$ensembl.transcript %in% tra.extracted)
tra.chips = tra.data[k,] #24,783
dim(tra.chips)
#24783 10
#we want to now extract the genes from Ensembl table that are present in the TRAs expressed in our chips
c = which(ensembl.transcripts %in% tra.extracted)
ensembl.only.tra = ensembl.data[c,]
dim(ensembl.only.tra)
#24623 9
#reorder the rows of ensembl.only.tra and tra.chips
tra.chips = arrange(tra.chips,ensembl.transcript)
ensembl.only.tra = arrange(ensembl.only.tra,Transcript.stable.ID)
#fusion of two tables: tra.chips and human.vsnrma.only.tra
fusion.tra.chips = cbind(human.vsnrma.only.tra,tra.chips$ensembl.gene,tra.chips$tiss.number,tra.chips$tissues,tra.chips$max.tissue)
colnames(fusion.tra.chips)[19:22]<-c("ensembl.gene","tissue.number","tissues","max.tissue")
# fusion of fusion.tra.chips and ensembl.only.tra (aware that ensembl.only.tra table contains less rows than the other two tables due to the 160 missing genes)
p = which(rownames(fusion.tra.chips) %in% ensembl.transcripts)
tra.ensembl = fusion.tra.chips[p,]
annotated.tra = cbind(tra.ensembl,ensembl.only.tra$Gene.name,ensembl.only.tra$Gene.description,ensembl.only.tra$Chromosome.scaffold.name)
#rename colnames
colnames(annotated.tra)[23:25]<-c("Gene.name","Gene.description","Chromosome.scaffold.name")
setwd("~//documents//GitHub//2022-topic-04-team-03//Tables")
# Define the different stages of the chips in a vector
stage = factor(x= c(1,1,1,2,2,2,4,4,4,8,8,8,"morula","morula","morula", "blastocyst", "blastocyst", "blastocyst"),levels= c(1,2,4,8,"morula","blastocyst"))
# Create a design matrix with the stages
design = model.matrix(~0 + stage)
# Create a contrast matrix which compares all the stages with one another
cm = makeContrasts(stage1.2 = stage2-stage1, stage1.4 = stage4-stage1, stage1.8 = stage8-stage1, stage1.morula = stagemorula-stage1, stage1.blastocyst =stageblastocyst-stage1,
stage2.4 = stage4-stage2, stage2.8 = stage8-stage2, stage2.morula = stagemorula-stage2,  stage2.blastocyst = stageblastocyst-stage2,
stage4.8 = stage8-stage4, stage4.morula = stagemorula-stage4,  stage4.blastocyst = stageblastocyst-stage4,
stage8.morula = stagemorula-stage8, stage8.blastocyst = stageblastocyst-stage8,
stagemorula.blastocyst =stageblastocyst -stagemorula,
levels = design)
# Fit the coefficients of the model
fit = lmFit(human.vsnrma.df2, design)
fit2 = contrasts.fit(fit, contrasts = cm)
# Calculate the t-statistics
fit2 = eBayes(fit2)
# Number of differentially expressed genes (p-value = 0.05)
results = decideTests(fit2, p.value = 0.05)
summary(results)
# Number of differentially expressed genes (p-value = 0.01)
results2 = decideTests(fit2, p.value = 0.01)
summary(results2)
fit.function = function(i){
fit.table = contrasts.fit(fit, contrasts = cm[,i])
fit.table = eBayes(fit.table)
}
fit.1.2 = fit.function(1)
fit.1.4 = fit.function(2)
fit.1.8 = fit.function(3)
fit.1.m = fit.function(4)
fit.1.b = fit.function(5)
fit.2.4 = fit.function(6)
fit.2.8 = fit.function(7)
fit.2.m = fit.function(8)
fit.2.b = fit.function(9)
fit.4.8 = fit.function(10)
fit.4.m = fit.function(11)
fit.4.b = fit.function(12)
fit.8.m = fit.function(13)
fit.8.b = fit.function(14)
fit.m.b = fit.function(15)
top.table = function(i){
fit.table = contrasts.fit(fit, contrasts = cm[,i])
fit.table = eBayes(fit.table)
pvalue01 = sum(p.adjust(fit.table$p.value, "BH") < 0.01)
topTable(fit.table, number = pvalue01)
}
limma.table.1.2 = top.table(1)
limma.table.1.4 = top.table(2)
limma.table.1.8 = top.table(3)
limma.table.1.m = top.table(4)
limma.table.1.b = top.table(5)
limma.table.2.4 = top.table(6)
limma.table.2.8 = top.table(7)
limma.table.2.m = top.table(8)
limma.table.2.b = top.table(9)
limma.table.4.8 = top.table(10)
limma.table.4.m = top.table(11)
limma.table.4.b = top.table(12)
limma.table.8.m = top.table(13)
limma.table.8.b = top.table(14)
limma.table.m.b = top.table(15)
limma.annotation = function(x){
a = which(ensembl.transcripts %in% rownames(x))
ensembl.new = ensembl.data[a,]
b = which(rownames(x) %in% ensembl.new$Transcript.stable.ID)
x.new = x[b,]
ensembl.new = arrange(ensembl.new,Transcript.stable.ID)
x.new = arrange(x.new, rownames(x.new))
annotated.x = cbind(x.new, ensembl.new$Gene.name, ensembl.new$Gene.description,ensembl.new$Chromosome.scaffold.name, ensembl.new$Gene.stable.ID)
colnames(annotated.x)[7:10]<-c("gene.name","gene.description","Chromosome.scaffold.name", "Gene.stable.ID")
annotated.x = arrange(annotated.x, adj.P.Val)
return(annotated.x)
}
annotated.limma.1.8 = limma.annotation(limma.table.1.8)
annotated.limma.1.m = limma.annotation(limma.table.1.m)
annotated.limma.1.b = limma.annotation(limma.table.1.b)
#annotated.limma.2.4 = limma.annotation(limma.table.2.4)
annotated.limma.2.8 = limma.annotation(limma.table.2.8)
annotated.limma.2.m = limma.annotation(limma.table.2.m)
annotated.limma.2.b = limma.annotation(limma.table.2.b)
annotated.limma.4.8 = limma.annotation(limma.table.4.8)
annotated.limma.4.m = limma.annotation(limma.table.4.m)
annotated.limma.4.b = limma.annotation(limma.table.4.b)
annotated.limma.8.m = limma.annotation(limma.table.8.m)
annotated.limma.8.b = limma.annotation(limma.table.8.b)
annotated.limma.m.b = limma.annotation(limma.table.m.b)
#annotated limma tables mit TRAs annotaten
#1.4 und 1.2 sind 00
nr<-c(1,9,10)
annotated.limma.1.8$ensembl.transcript = rownames(annotated.limma.1.8)
annotated.limma.1.8.tra <- merge(annotated.limma.1.8, tra.data[,nr], by = 'ensembl.transcript')
annotated.limma.1.m$ensembl.transcript = rownames(annotated.limma.1.m)
annotated.limma.1.m.tra <- merge(annotated.limma.1.m, tra.data[,nr], by = 'ensembl.transcript')
annotated.limma.1.b$ensembl.transcript = rownames(annotated.limma.1.b)
annotated.limma.1.b.tra <- merge(annotated.limma.1.b, tra.data[,nr], by = 'ensembl.transcript')
#2.4. ist 00
annotated.limma.2.8$ensembl.transcript = rownames(annotated.limma.2.8)
annotated.limma.2.8.tra <- merge(annotated.limma.2.8, tra.data[,nr], by = 'ensembl.transcript')
annotated.limma.2.m$ensembl.transcript = rownames(annotated.limma.2.m)
annotated.limma.2.m.tra <- merge(annotated.limma.2.m, tra.data[,nr], by = 'ensembl.transcript')
annotated.limma.2.b$ensembl.transcript = rownames(annotated.limma.2.b)
annotated.limma.2.b.tra <- merge(annotated.limma.2.b, tra.data[,nr], by = 'ensembl.transcript')
annotated.limma.4.8$ensembl.transcript = rownames(annotated.limma.4.8)
annotated.limma.4.8.tra <- merge(annotated.limma.4.8, tra.data[,nr], by = 'ensembl.transcript')
annotated.limma.4.m$ensembl.transcript = rownames(annotated.limma.4.m)
annotated.limma.4.m.tra <- merge(annotated.limma.4.m, tra.data[,nr], by = 'ensembl.transcript')
annotated.limma.4.b$ensembl.transcript = rownames(annotated.limma.4.b)
annotated.limma.4.b.tra <- merge(annotated.limma.4.b, tra.data[,nr], by = 'ensembl.transcript')
annotated.limma.8.m$ensembl.transcript = rownames(annotated.limma.8.m)
annotated.limma.8.m.tra <- merge(annotated.limma.8.m, tra.data[,nr], by = 'ensembl.transcript')
annotated.limma.8.b$ensembl.transcript = rownames(annotated.limma.8.b)
annotated.limma.8.b.tra <- merge(annotated.limma.8.b, tra.data[,nr], by = 'ensembl.transcript')
annotated.limma.m.b$ensembl.transcript = rownames(annotated.limma.m.b)
annotated.limma.m.b.tra <- merge(annotated.limma.m.b, tra.data[,nr], by = 'ensembl.transcript')
p1 <- ggplot(annotated.limma.table.vollst.1.8, aes(logFC, -log(adj.P.Val,10)), legend=FALSE)+
geom_point(aes(color = Expression),size = 2/5)+
ggtitle("Volcano plot between 1-cell stage and 8-cell stage")+
theme(plot.title = element_text(hjust = 0.5,face = "bold",size=14))+
xlab(expression("log"[10]*"FC")) +
ylab(expression("-log"[10]*"(adj.P.Val)"))+
geom_vline(xintercept=c(-2, 2), col="black",linetype = "dashed") +
geom_hline(yintercept=-log10(0.01), col="black",linetype = "dashed")
